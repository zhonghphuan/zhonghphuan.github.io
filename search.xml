<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 笔记（一）</title>
    <url>/2022/09/22/C-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1、成员函数末尾带const-：-不会修改该对象里任何成员变量的值"><a href="#1、成员函数末尾带const-：-不会修改该对象里任何成员变量的值" class="headerlink" title="1、成员函数末尾带const ： 不会修改该对象里任何成员变量的值"></a>1、成员函数末尾带const ： 不会修改该对象里任何成员变量的值</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">noone</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  Hour += <span class="number">10</span>;  <span class="comment">//错误，常量成员函数不可以修改稿成员变量的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、mutable-修饰符来修饰一个成员变量，这个成员变量处于可变状态，即使是以const-结尾的成员函数中也能修改。"><a href="#2、mutable-修饰符来修饰一个成员变量，这个成员变量处于可变状态，即使是以const-结尾的成员函数中也能修改。" class="headerlink" title="2、mutable 修饰符来修饰一个成员变量，这个成员变量处于可变状态，即使是以const 结尾的成员函数中也能修改。"></a>2、mutable 修饰符来修饰一个成员变量，这个成员变量处于可变状态，即使是以const 结尾的成员函数中也能修改。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> Hour；</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">noone</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  Hour += <span class="number">10</span>;  <span class="comment">//可以修改成员变量Hour了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、static-修饰的成员变量（静态成员变量），在类中声明但没有定义，未分配内存，需要正在cpp源文件头定义来保证任何调用函数之前这个静态变量已经被初始化"><a href="#3、static-修饰的成员变量（静态成员变量），在类中声明但没有定义，未分配内存，需要正在cpp源文件头定义来保证任何调用函数之前这个静态变量已经被初始化" class="headerlink" title="3、static 修饰的成员变量（静态成员变量），在类中声明但没有定义，未分配内存，需要正在cpp源文件头定义来保证任何调用函数之前这个静态变量已经被初始化"></a>3、static 修饰的成员变量（静态成员变量），在类中声明但没有定义，未分配内存，需要正在cpp源文件头定义来保证任何调用函数之前这个静态变量已经被初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .h 文件中</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> mystatic;                      <span class="comment">//声明静态成员变量但没有定义</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mystaticfunc</span><span class="params">(<span class="keyword">int</span> testvalues)</span></span>; <span class="comment">// 声明静态成员函数</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// .cpp文件中</span></span><br><span class="line"><span class="keyword">int</span> Time::mystatic = <span class="number">5</span>; <span class="comment">// 可以不给初始值，默认为0，定义时不要加static</span></span><br></pre></td></tr></table></figure>

<h3 id="4、-default-：-编译器自动生成函数体，等价于-，-只适用于特殊的构造函数。-delete-：显式的禁用某个函数"><a href="#4、-default-：-编译器自动生成函数体，等价于-，-只适用于特殊的构造函数。-delete-：显式的禁用某个函数" class="headerlink" title="4、= default ： 编译器自动生成函数体，等价于 {}， 只适用于特殊的构造函数。 = delete ：显式的禁用某个函数"></a>4、= default ： 编译器自动生成函数体，等价于 {}， 只适用于特殊的构造函数。 = delete ：显式的禁用某个函数</h3><h3 id="5、拷贝构造函数：如果一个类的构造函数的第一个参数是所属的类类型引用，若有额外的参数，那么这些额外的参数都有默认值，如果定义了自己的拷贝构造函数，那么就取代了编译器合成的拷贝构造函数，这个时候就必须在自己的拷贝构造函数中给类中成员逐个赋值，第一个参数带const，不带explicit修饰。"><a href="#5、拷贝构造函数：如果一个类的构造函数的第一个参数是所属的类类型引用，若有额外的参数，那么这些额外的参数都有默认值，如果定义了自己的拷贝构造函数，那么就取代了编译器合成的拷贝构造函数，这个时候就必须在自己的拷贝构造函数中给类中成员逐个赋值，第一个参数带const，不带explicit修饰。" class="headerlink" title="5、拷贝构造函数：如果一个类的构造函数的第一个参数是所属的类类型引用，若有额外的参数，那么这些额外的参数都有默认值，如果定义了自己的拷贝构造函数，那么就取代了编译器合成的拷贝构造函数，这个时候就必须在自己的拷贝构造函数中给类中成员逐个赋值，第一个参数带const，不带explicit修饰。"></a>5、拷贝构造函数：如果一个类的构造函数的第一个参数是所属的类类型引用，若有额外的参数，那么这些额外的参数都有默认值，如果定义了自己的拷贝构造函数，那么就取代了编译器合成的拷贝构造函数，这个时候就必须在自己的拷贝构造函数中给类中成员逐个赋值，第一个参数带const，不带explicit修饰。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time myTime;               <span class="comment">//这会调用默认构造函数（不带参的）</span></span><br><span class="line">Time myTime2 = myTime;     <span class="comment">//调用了拷贝构造函数</span></span><br><span class="line"><span class="function">Time <span class="title">myTime3</span> <span class="params">( myTime)</span></span>;    <span class="comment">//调用了拷贝构造函数</span></span><br><span class="line">Time myTime4 &#123; myrine &#125;;   <span class="comment">//调用了拷贝构造函数</span></span><br><span class="line">Time myTime5 = ( myTime&#125;;  <span class="comment">//调用了拷贝构造函数</span></span><br><span class="line">Time myTime6;              <span class="comment">//这会调用默认构造函数（不带参的）</span></span><br><span class="line">myTime6 = myTime5;         <span class="comment">//没有调用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造函数</span></span><br><span class="line">Time::Time(<span class="keyword">const</span> Time&amp; timem, <span class="keyword">int</span> a)</span><br></pre></td></tr></table></figure>

<h3 id="6、函数遮蔽：子类中如果有一个同名函数，那么父类中不管有几个同名函数，子类中都无法访问，如果我们确实想调用父类中的同名函数，有如下方法："><a href="#6、函数遮蔽：子类中如果有一个同名函数，那么父类中不管有几个同名函数，子类中都无法访问，如果我们确实想调用父类中的同名函数，有如下方法：" class="headerlink" title="6、函数遮蔽：子类中如果有一个同名函数，那么父类中不管有几个同名函数，子类中都无法访问，如果我们确实想调用父类中的同名函数，有如下方法："></a>6、函数遮蔽：子类中如果有一个同名函数，那么父类中不管有几个同名函数，子类中都无法访问，如果我们确实想调用父类中的同名函数，有如下方法：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1)在子类的成员函数中用“父类::函数名”强制调用父类函数</span></span><br><span class="line"><span class="comment">// (2) 使用using，通过using让父类的同名函数在子类中可见</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">using</span> Human::sameNameFunc:   <span class="comment">// 只能指定函数名</span></span><br></pre></td></tr></table></figure>

<h3 id="7、基类中某个函数声明为虚函数，则所有子类中它都是虚函数。父类指针指向子类对象，调用子类同名同参函数，则需要把父类这个函数声明为虚函数（virtual）"><a href="#7、基类中某个函数声明为虚函数，则所有子类中它都是虚函数。父类指针指向子类对象，调用子类同名同参函数，则需要把父类这个函数声明为虚函数（virtual）" class="headerlink" title="7、基类中某个函数声明为虚函数，则所有子类中它都是虚函数。父类指针指向子类对象，调用子类同名同参函数，则需要把父类这个函数声明为虚函数（virtual）"></a>7、基类中某个函数声明为虚函数，则所有子类中它都是虚函数。父类指针指向子类对象，调用子类同名同参函数，则需要把父类这个函数声明为虚函数（virtual）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human *human = <span class="keyword">new</span> Men;</span><br><span class="line">human-&gt;eat(); <span class="comment">//如果父类eat声明为virtual，则调用的是子类Men的eat函数</span></span><br><span class="line">human-&gt;Human::eat(); <span class="comment">// 如果函数前加了父类命名空间，则直接调用父类中的eat，即使父类声明为virtual。</span></span><br></pre></td></tr></table></figure>

<h3 id="8、为了避免在子类中写错虚函数，在C-11中，可以在子类函数声明中加override（虚函数专用），子类覆盖父类的同名同参函数，编译器进行纠错。"><a href="#8、为了避免在子类中写错虚函数，在C-11中，可以在子类函数声明中加override（虚函数专用），子类覆盖父类的同名同参函数，编译器进行纠错。" class="headerlink" title="8、为了避免在子类中写错虚函数，在C++11中，可以在子类函数声明中加override（虚函数专用），子类覆盖父类的同名同参函数，编译器进行纠错。"></a>8、为了避免在子类中写错虚函数，在C++11中，可以在子类函数声明中加override（虚函数专用），子类覆盖父类的同名同参函数，编译器进行纠错。</h3><h3 id="9、final-也是虚函数专用，用在父类中，如果我们在父类的函数声明中加了final，那么任何尝试子类覆盖父类的该函数都会失败"><a href="#9、final-也是虚函数专用，用在父类中，如果我们在父类的函数声明中加了final，那么任何尝试子类覆盖父类的该函数都会失败" class="headerlink" title="9、final 也是虚函数专用，用在父类中，如果我们在父类的函数声明中加了final，那么任何尝试子类覆盖父类的该函数都会失败"></a>9、final 也是虚函数专用，用在父类中，如果我们在父类的函数声明中加了final，那么任何尝试子类覆盖父类的该函数都会失败</h3><h3 id="10、纯虚函数：在基类中声明的纯虚函数，要求子类中去实现。一旦一个类中有纯虚函数，就不能生成这个类的对象了，这个类成为了“抽象类”"><a href="#10、纯虚函数：在基类中声明的纯虚函数，要求子类中去实现。一旦一个类中有纯虚函数，就不能生成这个类的对象了，这个类成为了“抽象类”" class="headerlink" title="10、纯虚函数：在基类中声明的纯虚函数，要求子类中去实现。一旦一个类中有纯虚函数，就不能生成这个类的对象了，这个类成为了“抽象类”"></a>10、纯虚函数：在基类中声明的纯虚函数，要求子类中去实现。一旦一个类中有纯虚函数，就不能生成这个类的对象了，这个类成为了“抽象类”</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1)抽象类不能生成对象，统一管理子类对象</span></span><br><span class="line"><span class="comment">// 2)子类中必须要实现该基类中定义的纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 没有函数体，只有声明</span></span><br></pre></td></tr></table></figure>

<h3 id="11、当定义一个子类对象时，先执行的是父类的构造函数体，再行子类构造函数体，当对象被系统回收时，先执行子类的析构函数，再执行父类的函数体。"><a href="#11、当定义一个子类对象时，先执行的是父类的构造函数体，再行子类构造函数体，当对象被系统回收时，先执行子类的析构函数，再执行父类的函数体。" class="headerlink" title="11、当定义一个子类对象时，先执行的是父类的构造函数体，再行子类构造函数体，当对象被系统回收时，先执行子类的析构函数，再执行父类的函数体。"></a>11、当定义一个子类对象时，先执行的是父类的构造函数体，再行子类构造函数体，当对象被系统回收时，先执行子类的析构函数，再执行父类的函数体。</h3><h3 id="12、用基类指针new子类对象，在delete的时候系统不会调用子类的析构函数，需要把父类的析构函数声明为虚函数才行-虚析构函数"><a href="#12、用基类指针new子类对象，在delete的时候系统不会调用子类的析构函数，需要把父类的析构函数声明为虚函数才行-虚析构函数" class="headerlink" title="12、用基类指针new子类对象，在delete的时候系统不会调用子类的析构函数，需要把父类的析构函数声明为虚函数才行 - 虚析构函数"></a>12、用基类指针new子类对象，在delete的时候系统不会调用子类的析构函数，需要把父类的析构函数声明为虚函数才行 - 虚析构函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human *human = <span class="keyword">new</span> Men；</span><br><span class="line"><span class="keyword">delete</span> human; <span class="comment">// 没有执行子类的析构函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改父类析构函数：</span></span><br><span class="line"><span class="keyword">virtual</span> ~ Human();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1)如果一个类想要做父类，务必要把这个类的析构写成virtual</span></span><br><span class="line"><span class="comment">// 2)普通类可以不写析构函数，但如果是基类，就必须写一个析构函数，必须是虚析构函数</span></span><br><span class="line"><span class="comment">// 3)虚函数会增加内存开销，类里面定义虚函数，编译器就会给这个类增加虚函数表，这个表中存放虚函数地址等信息</span></span><br></pre></td></tr></table></figure>

<h3 id="13、每个类都负责控制自己的友元类和友元函数，友元类关系的判断，最終还是要看类定义中有没有对应的friend-类声明："><a href="#13、每个类都负责控制自己的友元类和友元函数，友元类关系的判断，最終还是要看类定义中有没有对应的friend-类声明：" class="headerlink" title="13、每个类都负责控制自己的友元类和友元函数，友元类关系的判断，最終还是要看类定义中有没有对应的friend 类声明："></a>13、每个类都负责控制自己的友元类和友元函数，友元类关系的判断，最終还是要看类定义中有没有对应的friend 类声明：</h3><p>(1）友元关系是不能被子类继承的。<br>(2）友元关系是单向的，比如类B是类A 的友元类，但这并不表示类 A是类B的友元类。<br>(3）友元关系也没有传递性，例如类B是类 A的友元类，类C是类 B的友元类，这并不代表类 C是类 A的友元类。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Class A</span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span> <span class="comment">// 不需要public、protected、private 修饰</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="14、RTTI（Run-Time-Type-identification）：运行时类型识别"><a href="#14、RTTI（Run-Time-Type-identification）：运行时类型识别" class="headerlink" title="14、RTTI（Run Time Type identification）：运行时类型识别"></a>14、RTTI（Run Time Type identification）：运行时类型识别</h3><p>(1）dynamic_cast: 能够将父类指针或引用安全的转换为子类的指针或引用，帮助开发者做安全检查</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human *phuman = <span class="keyword">new</span> Men;</span><br><span class="line">Men *pman = <span class="keyword">dynamic_cast</span>&lt;Men *&gt;(phuman);</span><br><span class="line"><span class="keyword">if</span> (pman != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;转换成功&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;转换失败&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于引用，如果转换失败，则系统会抛出std::bad_cast异常，try...catch()&#123;&#125;</span></span><br><span class="line">Human *phuman = <span class="keyword">new</span> Men;</span><br><span class="line">Human &amp;q = *phuman;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  Men &amp;pman = <span class="keyword">dynamic_cast</span>&lt;Men &amp;&gt;(q);</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;转换成功&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">std</span>::bad_cast) &#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;转换失败&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2）typeid：返回指针或引用所指对象的实际类型,例如typeid(指针或引用)，typeid(表达式)，返回一个常量对象的引用（标准库类型(type_info)）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human *phuman = <span class="keyword">new</span> Men;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::type_info&amp; tp = <span class="keyword">typeid</span>(*phuman);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tp.name()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 父类有虚函数则结果为Class Men,否者为class Human</span></span><br></pre></td></tr></table></figure>
<p>(3）要想RTTI两个运算符正常工作，那么基类中必须要有一个虚函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++中，如果类里含有虚函数。编译器就会对该类产生一个虚函数表。</span></span><br><span class="line"><span class="comment">// 虚函数表里有很多项，每一项都是一个指针。每个指针指向的是这个类里的各个虚函数的入口地址。</span></span><br><span class="line"><span class="comment">// 虚函数表项里，第一个表项很特殊（有些编译器虚函数表第一项之前的内存位置存放指针，指向这个类所关联的type_info对彖），它指向的不是虚函数的入口地址，它指向的实际上是这个类所关联的type_info对彖</span></span><br><span class="line">Human *phuman = <span class="keyword">new</span> Men:</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::type_info&amp; tp = <span class="keyword">typeid</span>(*phuman);</span><br><span class="line"><span class="comment">//phuman对象里有一个我们看不见的指针，这个指针指向的是这个对象所在的类Men里的虚函数表。</span></span><br></pre></td></tr></table></figure>

<h3 id="15、左值引用，一般不能绑定右值，只能绑定到左值上，const引用可以绑定到右值，const引用特殊。"><a href="#15、左值引用，一般不能绑定右值，只能绑定到左值上，const引用可以绑定到右值，const引用特殊。" class="headerlink" title="15、左值引用，一般不能绑定右值，只能绑定到左值上，const引用可以绑定到右值，const引用特殊。"></a>15、左值引用，一般不能绑定右值，只能绑定到左值上，const引用可以绑定到右值，const引用特殊。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *p = <span class="literal">nullptr</span> ; <span class="comment">// 指针有空指针说法，引用没有空引用说法，必须初始化，一般绑定左值。</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b&#123; a &#125;        <span class="comment">//b 绑定到a，当然可以</span></span><br><span class="line"><span class="keyword">int</span> &amp;c;            <span class="comment">//不可以，引用必须要初始化</span></span><br><span class="line"><span class="keyword">int</span> &amp;c = <span class="number">1</span>;        <span class="comment">//不可以，c要绑定到左值上，不能绑定到右值上</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;c = <span class="number">1</span>;  <span class="comment">//可以,const 引用可以绑定到右值上，所以const 引用可以说比较特殊</span></span><br><span class="line"><span class="comment">// 上面这段代码最后一行等价于下面这两行：</span></span><br><span class="line"><span class="keyword">int</span> tempvalue = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;c = tempvalue <span class="comment">//可以把 tempvalve 看成一个临时变量</span></span><br></pre></td></tr></table></figure>

<h3 id="16、右值引用，绑定到右值的引用，用“-amp-amp-”，希望用右值引用来绑定到即将销毁的或是一些临时的对象上。C-11-引入目的是提高程序运行效率，将拷贝对象变成移动对象。"><a href="#16、右值引用，绑定到右值的引用，用“-amp-amp-”，希望用右值引用来绑定到即将销毁的或是一些临时的对象上。C-11-引入目的是提高程序运行效率，将拷贝对象变成移动对象。" class="headerlink" title="16、右值引用，绑定到右值的引用，用“&amp;&amp;”，希望用右值引用来绑定到即将销毁的或是一些临时的对象上。C++ 11 引入目的是提高程序运行效率，将拷贝对象变成移动对象。"></a>16、右值引用，绑定到右值的引用，用“&amp;&amp;”，希望用右值引用来绑定到即将销毁的或是一些临时的对象上。C++ 11 引入目的是提高程序运行效率，将拷贝对象变成移动对象。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;c = <span class="number">1</span>;        <span class="comment">//不可以，c要绑定到左值上，不能绑定到右值上</span></span><br><span class="line"><span class="keyword">int</span> &amp;&amp;c = <span class="number">1</span>;       <span class="comment">//可以</span></span><br><span class="line"><span class="keyword">int</span> &amp;&amp;c = a;       <span class="comment">//不可以，不能将右值引用绑定到左值上</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;c = <span class="number">1</span>;  <span class="comment">//可以</span></span><br></pre></td></tr></table></figure>

<h3 id="17、-i-左值表达式，-i-右值表达式"><a href="#17、-i-左值表达式，-i-右值表达式" class="headerlink" title="17、++i : 左值表达式， i++ : 右值表达式"></a>17、++i : 左值表达式， i++ : 右值表达式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">++i 是直接给 i 变量加 <span class="number">1</span>，然后返回i本身，因为i是变量，所以可以被赋值，因此是左值表达式。看看如下范例：</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">(++i) = <span class="number">20</span>; </span><br><span class="line"></span><br><span class="line">i++先产生一个临时变量来保存i的值用于使用目的，再给 i加 <span class="number">1</span>，接着返回临时变量，之后系统再释放这个临时变量，临时变量被释放掉了，不能再被赋值，因此是右值表达式。看看如下范例：</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">(i++) = <span class="number">20</span>; <span class="comment">//语法错误，提示：表达式必须是可修改的左值</span></span><br></pre></td></tr></table></figure>

<h3 id="18、std-move-把一个左值-强制-转换成右值"><a href="#18、std-move-把一个左值-强制-转换成右值" class="headerlink" title="18、std::move : 把一个左值 强制 转换成右值"></a>18、std::move : 把一个左值 强制 转换成右值</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i= <span class="number">10</span>；</span><br><span class="line"><span class="keyword">int</span> &amp;&amp;r = i;  <span class="comment">// 错误，不能将右值引用绑定到左值上</span></span><br><span class="line"><span class="keyword">int</span> &amp;&amp;r = <span class="built_in">std</span>::move(i); <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>

<h3 id="19、临时对象产生："><a href="#19、临时对象产生：" class="headerlink" title="19、临时对象产生："></a>19、临时对象产生：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CTempValue sum;</span><br><span class="line">sum = <span class="number">1000</span>; <span class="comment">// 产生了一个临时对象</span></span><br><span class="line">CTempValue sum = <span class="number">1000</span>； <span class="comment">// 不会产生临时对象，为sum对象预留了空间，用1000构造sum对象，而且是直接构造在sum对象预留空间里。</span></span><br></pre></td></tr></table></figure>

<h3 id="20、移动构造函数：声明和实现习惯性加noexcept通知编译器该移动构造函数不抛出任何异常提高编译效率"><a href="#20、移动构造函数：声明和实现习惯性加noexcept通知编译器该移动构造函数不抛出任何异常提高编译效率" class="headerlink" title="20、移动构造函数：声明和实现习惯性加noexcept通知编译器该移动构造函数不抛出任何异常提高编译效率"></a>20、移动构造函数：声明和实现习惯性加noexcept通知编译器该移动构造函数不抛出任何异常提高编译效率</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">A(A&amp;&amp; tempa) <span class="keyword">noexcept</span> : m_pb(tempa.m_pb) &#123;</span><br><span class="line">    tempa.m_pb  = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;移动构造函数执行&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="21、虚继承离不开虚基类，虚基类的特点就是无论这个类在继承体系中出现多少次，派生类中都只会包含唯一一个共享的该类子对象"><a href="#21、虚继承离不开虚基类，虚基类的特点就是无论这个类在继承体系中出现多少次，派生类中都只会包含唯一一个共享的该类子对象" class="headerlink" title="21、虚继承离不开虚基类，虚基类的特点就是无论这个类在继承体系中出现多少次，派生类中都只会包含唯一一个共享的该类子对象"></a>21、虚继承离不开虚基类，虚基类的特点就是无论这个类在继承体系中出现多少次，派生类中都只会包含唯一一个共享的该类子对象</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> B &#123;...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="22、显式类型转换运算符"><a href="#22、显式类型转换运算符" class="headerlink" title="22、显式类型转换运算符"></a>22、显式类型转换运算符</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m_i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>关于WKWebView 秒开方案</title>
    <url>/2020/08/22/%E5%85%B3%E4%BA%8EWKWebView-%E7%A7%92%E5%BC%80%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<blockquote>
<p>WKWebView 秒开方案，不仅需要端上优化，也需要前后端配合，我们业务前期在UIWebView上已经通过各种优化达到了秒开，但是据说由于苹果今年12月份就不允许上架UIWebView，所以我们紧急切换到WKWebView，但由于WKWebView在启动初始化的时候表现还是不如人意，我们的目标是低端机型至少大部分页面也能秒开。经过一系列的优化操作，实现效果和数据都是非常可观的。</p>
</blockquote>
<a id="more"></a>
<h5 id="秒开流程图"><a href="#秒开流程图" class="headerlink" title="秒开流程图"></a>秒开流程图</h5><p><img src="/images/%E5%85%B3%E4%BA%8EWKWebView-%E7%A7%92%E5%BC%80%E6%96%B9%E6%A1%88/WKWebview%E7%A7%92%E5%BC%80%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<h5 id="秒开方案"><a href="#秒开方案" class="headerlink" title="秒开方案"></a>秒开方案</h5><p>1、模板下载。<br>2、首图预加载。<br>3、正文列表body预取。<br>4、CDN预加载。<br>5、双缓存池（目前一共不超过8个）：一个负责feed流列表滚动停止时异步执行js预热；一个负责进入文章后准备好一个干净的WKWebview供下一次未命中秒开WKWebview使用。<br>6、点击cell命中预热好的秒开WKWebview，则进行预热下一篇文章，这样提高秒开率。<br>7、initpage预热好的WebView需要先放在屏幕最右侧隐藏，在进入后显示并重设frame回归正常视图中。<br>8、feed流预热的WebView通过initPage传false参数、进入文章页后的WebView通过initPage传true参数，为保证不会刷新跳动，模板中有设置flag确保一次initPage<br>9、动态js回填方案：load模板 → 成功会收到前端桥接Ready状态 → 客户端收到Ready状态会进行initPage操作，此时只是静态加载页面渲染显示给用户看的界面，不会触发任何网络或其他模板加载，initPage成功后会回调init状态 → 客户端收到init状态会进行执行showPage操作，表示已经进入页面需要继续加载好所有未加载好的逻辑，例如图片渲染、网络请求、模板加载等，showPage成功后前端回调show状态 → 客户端仍为页面已经加载完成，处理加载完成后的逻辑，例如打点上报等<br>10、全局并没有持有WKWebview不释放，而是只要进入文章页就会预创建下次需要预热的WKWebview，保证每次的WKWebview都是干净无历史痕迹，在dealloc方法中会释放双缓存池当前加载的WebView。 </p>
<blockquote>
<p>其中initpage和showPage等都是前端处理相关逻辑回调给客户端状态，客户端拿到状态进行下一步操作。</p>
</blockquote>
<h5 id="技术数据"><a href="#技术数据" class="headerlink" title="技术数据"></a>技术数据</h5><table>
<thead>
<tr>
<th align="left">Item</th>
<th align="right">端到端平均耗时</th>
<th align="center">端到端p90耗时</th>
</tr>
</thead>
<tbody><tr>
<td align="left">对照组</td>
<td align="right">1210 ms</td>
<td align="center">2800 ms</td>
</tr>
<tr>
<td align="left">实验组</td>
<td align="right">780 ms</td>
<td align="center">1800 ms</td>
</tr>
</tbody></table>
<h5 id="秒开效果对比"><a href="#秒开效果对比" class="headerlink" title="秒开效果对比"></a>秒开效果对比</h5><p>低端机型:真机6P，12.4.5系统<br>优化前线上UIWebview展示:<br><img src="/images/%E5%85%B3%E4%BA%8EWKWebView-%E7%A7%92%E5%BC%80%E6%96%B9%E6%A1%88/UIWebview.gif"><br>WKWebview展示:<br><img src="/images/%E5%85%B3%E4%BA%8EWKWebView-%E7%A7%92%E5%BC%80%E6%96%B9%E6%A1%88/wk.gif"></p>
]]></content>
      <categories>
        <category>WKWebView</category>
      </categories>
      <tags>
        <tag>WKWebView</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 自动化杂谈</title>
    <url>/2020/08/19/iOS%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<blockquote>
<p>前言：可持续集成自动化的话题已经老生常谈了。目前市面上比较流行的自动化流程工具——Fastlane，Fastlane是用Ruby语言编写的一套自动化工具集和框架，Fastlane的工具集基本上涵盖了打包，签名，测试，部署，发布，库管理等等用起来比较方便，配合Jenkins可持续化集成，基本可以满足大部分的流程自动化。</p>
</blockquote>
<p><img src="/images/iOS-%E8%87%AA%E5%8A%A8%E5%8C%96-%E6%89%93%E5%8C%85/%E8%87%AA%E5%8A%A8%E5%8C%961.jpg"></p>
<a id="more"></a>
<h5 id="一-打包"><a href="#一-打包" class="headerlink" title="一. 打包"></a>一. 打包</h5><blockquote>
<p>实现打包有很多种，例如xcodebuild，但已经有好用的工具集为何不用呢？<br>跟着打包的流程写脚本，例如我想打包，得提供给别人选择哪个分支，采用什么类型，及时通知等</p>
</blockquote>
<p><img src="/images/iOS-%E8%87%AA%E5%8A%A8%E5%8C%96-%E6%89%93%E5%8C%85/WX20200820-163454@2x.png"></p>
<ul>
<li>Jenkins上装了Git parameter plug-In 0.9.12版本的插件进行分支选择</li>
<li>想暴露什么参数在Jenkins上自定义</li>
<li>利用fastlane gym </li>
<li>上传蒲公英</li>
<li>由于之前蒲公英挂过一次，不能完全依赖第三方分发平台，自己再自建一个OTA服务器来内测分发</li>
<li>自定义内测的二维码采用python myqr生成</li>
<li>消息通知：我司采用企业微信，那就搞个机器人webhook一下，当然也可以脚本发个邮件</li>
<li>符号表选择是否上传</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">desc <span class="string">&quot;ad_Hoc 版本&quot;</span></span><br><span class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span>  <span class="params">|options|</span></span><br><span class="line">    <span class="comment"># 新建build号</span></span><br><span class="line">    new_build = options[<span class="symbol">:new_build</span>]</span><br><span class="line">    time = Time.new.strftime(<span class="string">&quot;%Y-%m-%d-%H:%M:%S&quot;</span>)</span><br><span class="line">    increment_build_number(</span><br><span class="line">      <span class="symbol">build_number:</span> new_build,</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">&quot;xxxxx.xcodeproj&quot;</span></span><br><span class="line">    )</span><br><span class="line">    sh(<span class="string">&quot;pod repo update&quot;</span>)</span><br><span class="line">    <span class="comment"># 拉取代码</span></span><br><span class="line">    cocoapods</span><br><span class="line">    <span class="comment"># 获取版本号</span></span><br><span class="line">    version = get_version_number(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">&quot;xxxxx.xcodeproj&quot;</span>,</span><br><span class="line">      <span class="symbol">target:</span> <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 打包环境</span></span><br><span class="line">    configuration = (options[<span class="symbol">:configuration</span>] ? options[<span class="symbol">:configuration</span>] : <span class="string">&quot;Release&quot;</span>)</span><br><span class="line">    ipaName=<span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">    ipaPath=configuration + <span class="string">&quot;/&quot;</span> + version + <span class="string">&quot;.&quot;</span> + new_build + <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="comment"># 导出ipa包地址</span></span><br><span class="line">    output_directory = <span class="string">&quot;/Users/admin/WebSites/app/ipa/&quot;</span> + ipaPath</span><br><span class="line">    <span class="comment">#manifest.plilst需要的参数</span></span><br><span class="line">    ipaUrl=<span class="string">&#x27;https://10.104.33.114/app/ipa/&#x27;</span> + ipaPath + ipaName + <span class="string">&#x27;.ipa&#x27;</span></span><br><span class="line">    plistPath = <span class="string">&#x27;https://10.104.33.114/app/ipa/&#x27;</span> + ipaPath + <span class="string">&#x27;manifest.plist&#x27;</span></span><br><span class="line">    pngName = version + <span class="string">&quot;.&quot;</span> + new_build + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    disImg =<span class="string">&#x27;https://10.104.33.114/app/icon/&#x27;</span> + pngName</span><br><span class="line">    gym(</span><br><span class="line">      <span class="symbol">scheme:</span> <span class="string">&quot;xxxxx&quot;</span>,</span><br><span class="line">      <span class="symbol">workspace:</span> <span class="string">&quot;xxxxx.xcworkspace&quot;</span>,</span><br><span class="line">      <span class="symbol">export_method:</span><span class="string">&quot;ad-hoc&quot;</span>,</span><br><span class="line">      <span class="symbol">output_directory:</span> output_directory,<span class="comment">#文件路径</span></span><br><span class="line">      <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">configuration:</span> configuration,</span><br><span class="line">      <span class="symbol">export_options:</span>&#123;</span><br><span class="line">         <span class="symbol">manifest:</span> &#123;</span><br><span class="line">             <span class="symbol">appURL:</span> ipaUrl,</span><br><span class="line">             <span class="symbol">displayImageURL:</span> disImg,</span><br><span class="line">             <span class="symbol">fullSizeImageURL:</span> disImg</span><br><span class="line">             &#125;,</span><br><span class="line">         &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 参数传给内测分发网页</span></span><br><span class="line">    size =<span class="string">`echo $(wc -c &lt; <span class="subst">#&#123;output_directory&#125;</span><span class="subst">#&#123;ipaName&#125;</span>.ipa)`</span></span><br><span class="line">    desc = URI::encode(options[<span class="symbol">:desc</span>])</span><br><span class="line">    appBuildURL = <span class="string">&quot;http://10.104.33.114/app/index.html?&quot;</span> + <span class="string">&quot;version=&quot;</span> + version + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;build=&quot;</span> + new_build + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;size=&quot;</span> + size.strip + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;time=&quot;</span> + time + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;desc=&quot;</span> + desc + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;pngName=&quot;</span> + pngName + <span class="string">&quot;&amp;&quot;</span> +  <span class="string">&quot;plistUrl=&quot;</span> + plistPath</span><br><span class="line">    myqrAppBuildURL = <span class="string">&quot;http://10.104.33.114/app/index.html?&quot;</span> + <span class="string">&quot;version=&quot;</span> + version + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;build=&quot;</span> + new_build + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;size=&quot;</span> + size.strip + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;time=&quot;</span> + time + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;desc=&quot;</span> + desc + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;pngName=&quot;</span> + pngName + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;plistUrl=&quot;</span> + plistPath</span><br><span class="line">    appQRCodeURL = <span class="string">&quot;http://10.104.33.114/app/icon/&quot;</span> + pngName</span><br><span class="line">    cpath = sh(<span class="string">&quot;pwd&quot;</span>).strip</span><br><span class="line">    <span class="string">`rm -rf <span class="subst">#&#123;cpath&#125;</span>/qrcode.png`</span></span><br><span class="line">    <span class="comment"># myqr生成二维码</span></span><br><span class="line">    <span class="string">`myqr <span class="subst">#&#123;myqrAppBuildURL&#125;</span>`</span></span><br><span class="line">    <span class="string">`mv <span class="subst">#&#123;cpath&#125;</span>/qrcode.png /Users/admin/WebSites/app/icon/<span class="subst">#&#123;pngName&#125;</span>`</span></span><br><span class="line">    UI.message <span class="string">&quot;appBuildURL:<span class="subst">#&#123;appBuildURL&#125;</span>&quot;</span></span><br><span class="line">    UI.message <span class="string">&quot;appQRCodeURL:<span class="subst">#&#123;appQRCodeURL&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 上传蒲公英</span></span><br><span class="line">    uploadPgy(options[<span class="symbol">:desc</span>])</span><br><span class="line">    versionDes = version + <span class="string">&quot; ( build &quot;</span>+ new_build + <span class="string">&quot; )&quot;</span></span><br><span class="line">    description = <span class="string">&quot;打包完成，版本：&quot;</span>+ versionDes + <span class="string">&quot;,包体积：&quot;</span> + size.strip</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意 myqr 是生成二维码的python 工具，需要设置环境变量</p>
</blockquote>
<p><img src="/images/iOS-%E8%87%AA%E5%8A%A8%E5%8C%96-%E6%89%93%E5%8C%85/image2020-4-9_17-4-42.png"><br>以上已经实现了打包，接下来上传蒲公英</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传蒲公英</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadPgy</span><span class="params">(desc)</span></span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    pgyer(<span class="symbol">api_key:</span> <span class="string">&quot;xxx&quot;</span>,<span class="symbol">user_key:</span> <span class="string">&quot;xxx&quot;</span>,<span class="symbol">update_description:</span><span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">    <span class="keyword">rescue</span></span><br><span class="line">    <span class="keyword">retry</span></span><br><span class="line">  xxx</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>如果实现企业微信通知，其实就是发送一个请求，此时要注意的是fastlane 是ruby 环境，执行shell脚本的 &amp; 或是 双引号需要转义：\  ，并非一个\，例如转义&amp;：\&amp;<br><img src="/images/iOS-自动化-打包/WX20200820-170210@2x.png" width = "300"  alt="" align=center /><br>基本以上已经实现了打包的日常需求了，gym中的export_options是自建内测分发的manifest配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export_options:&#123;</span><br><span class="line">         manifest: &#123;</span><br><span class="line">             appURL: ipaUrl,</span><br><span class="line">             displayImageURL: disImg,</span><br><span class="line">             fullSizeImageURL: disImg</span><br><span class="line">             &#125;,</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以下简单描述一下自建OTA服务</p>
</blockquote>
<ol>
<li>启动Web服务 - Mac自带Apache </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ httpd -v</span><br><span class="line">Server version: Apache/2.4.41 (Unix)</span><br><span class="line">Server built:   Apr 17 2020 19:06:36</span><br></pre></td></tr></table></figure>
<ul>
<li>启动：sudo apachectl start</li>
<li>停止：sudo apachectl stop</li>
<li>重启：sudo apachectl restart</li>
</ul>
<p>启动sudo apachectl start后浏览器<a href="http://127.0.0.1,显示it/">http://127.0.0.1，显示It</a> Works即成功</p>
<ol start="2">
<li>SSL签名证书</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">cd</span> /private/etc/apache2/</span><br><span class="line">➜  apache2 sudo mkdir ssl</span><br><span class="line">➜  apache2 <span class="built_in">cd</span> ssl</span><br><span class="line">➜  ssl sudo openssl genrsa -out ip211.key 2048</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...................+++</span><br><span class="line">..............................................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">➜  ssl sudo openssl req -new -key ip211.key -out ip211.csr</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:</span><br><span class="line">State or Province Name (full name) [Some-State]:</span><br><span class="line">Locality Name (eg, city) []:</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:127.0.0.1(此处填具体的ip地址)</span><br><span class="line">Email Address []:</span><br><span class="line"></span><br><span class="line">Please enter the following <span class="string">&#x27;extra&#x27;</span> attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br><span class="line">➜  ssl sudo openssl x509 -req -days 365000 -<span class="keyword">in</span> ip211.csr -signkey ip211.key -out ip211.crt</span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=AU/ST=Some-State/O=Internet Widgits Pty Ltd/CN=127.0.0.1</span><br><span class="line">Getting Private key</span><br><span class="line">➜  ssl sudo openssl rsa -<span class="keyword">in</span> ip211.key -out ip211-nopass.key</span><br><span class="line">writing RSA key</span><br><span class="line">➜  ssl ls -l</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r--  1 root  wheel  1679  8 20 17:26 ip211-nopass.key</span><br><span class="line">-rw-r--r--  1 root  wheel  1168  8 20 17:25 ip211.crt</span><br><span class="line">-rw-r--r--  1 root  wheel   985  8 20 17:23 ip211.csr</span><br><span class="line">-rw-r--r--  1 root  wheel  1679  8 20 17:20 ip211.key</span><br></pre></td></tr></table></figure>
<p>只有Common Name填写具体的ip地址</p>
<ol start="3">
<li>修改conf文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ssl sudo cp /private/etc/apache2/httpd.conf /private/etc/apache2/httpd.conf.bak</span><br><span class="line">Password:</span><br><span class="line">➜  ssl sudo cp /private/etc/apache2/extra/httpd-ssl.conf /private/etc/apache2/extra/httpd-ssl.conf.bak</span><br><span class="line">➜  ssl sudo cp /private/etc/apache2/mime.types /private/etc/apache2/mime.types.bak</span><br><span class="line">➜  ssl sudo vim /private/etc/apache2/httpd.conf</span><br><span class="line">➜  ssl sudo vim /private/etc/apache2/extra/httpd-ssl.conf</span><br><span class="line">➜  ssl sudo vim /private/etc/apache2/mime.types</span><br></pre></td></tr></table></figure>

<p>1）修改/private/etc/apache2/httpd.conf，去掉以下两个模块的注释<br>    LoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so<br>    LoadModule ssl_module libexec/apache2/mod_ssl.so<br>    Include /private/etc/apache2/extra/httpd-ssl.conf</p>
<p>2）修改/private/etc/apache2/extra/httpd-ssl.conf，去掉以下三处的注释<br>    ServerName 127.0.0.1（具体的ip地址）<br>    SSLCertificateFile “/private/etc/apache2/ssl/ip211.crt”<br>    SSLCertificateKeyFile “/private/etc/apache2/ssl/ip211-nopass.key”</p>
<p>3）修改/private/etc/apache2/mime.types，加入以下两条<br>    application/octet-stream ipa<br>    text/xml plist</p>
<ol start="4">
<li>重启服务：sudo apachectl restart，浏览器输入具体ip地址</li>
<li>配置目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir ipa</span><br><span class="line">$ sudo mkdir icon</span><br><span class="line">$ sudo mkdir ssl</span><br><span class="line">$ sudo mkdir plist</span><br></pre></td></tr></table></figure>
<p><img src="/images/iOS-%E8%87%AA%E5%8A%A8%E5%8C%96-%E6%89%93%E5%8C%85/WX20200820-181953@2x.png"></p>
<p>拷贝/private/etc/apache2/ssl/ip211.crt 到 这个ssl目录下:<br>sudo cp /private/etc/apache2/ssl/ip211.crt ~/WebSites/app/ssl/ip211.crt </p>
<ol start="6">
<li>制作一个简单的页面<blockquote>
<p>解析链接中的itms-services:// 实现OTA</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cmn-Hans&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>分发ipa包管理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=0.5,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.img</span> &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#35AF5D</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    padding: 20px;</span><br><span class="line">    margin: 30px;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 4<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-id">#999</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">opacity</span>: <span class="selector-class">.7</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 4<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-id">#555</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color:#35AF5D&quot;</span>&gt;</span></span><br><span class="line">    工程名</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">    版本：</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">    大小：</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">    更新时间：</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">    更新描述：</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;imgid&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./icon/*.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;installApp()&quot;</span>&gt;</span>安装app<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>).innerHTML = <span class="string">&quot;版本：&quot;</span> + getUrlParam(<span class="string">&quot;version&quot;</span>) + <span class="string">&quot; ( build &quot;</span> + getUrlParam(<span class="string">&quot;build&quot;</span>) + <span class="string">&quot; )&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;p2&quot;</span>).innerHTML = <span class="string">&quot;大小：&quot;</span> + getUrlParam(<span class="string">&quot;size&quot;</span>) + <span class="string">&quot; KB&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;p4&quot;</span>).innerHTML = <span class="string">&quot;更新时间：&quot;</span> + getUrlParam(<span class="string">&quot;time&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;p3&quot;</span>).innerHTML = <span class="string">&quot;更新描述：&quot;</span> + <span class="built_in">decodeURIComponent</span>(getUrlParam(<span class="string">&quot;desc&quot;</span>))</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgid&#x27;</span>).src = <span class="string">&quot;./icon/&quot;</span> + getUrlParam(<span class="string">&quot;pngName&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">variable</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> query = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vars = query.split(<span class="string">&quot;&amp;&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vars.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pair = vars[i].split(<span class="string">&quot;=&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (pair[<span class="number">0</span>] == variable) &#123; <span class="keyword">return</span> pair[<span class="number">1</span>]; &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> (<span class="literal">false</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">installApp</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> plistUrl = <span class="built_in">decodeURI</span>(getUrlParam(<span class="string">&quot;plistUrl&quot;</span>));</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.location.href = <span class="string">&quot;itms-services://?action=download-manifest&amp;url=&quot;</span> + plistUrl;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;display:block;margin: 30px;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://10.104.33.114/app/ssl/ip211.crt&quot;</span>&gt;</span>下载证书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;display:block;margin: 30px;&quot;</span>&gt;</span>点击下载证书，下载安装配置文件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;display:block;margin: 30px;&quot;</span>&gt;</span>在设置-通用-描述文件与设备管理中，选择已下载的配置文件，进行安装<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;display:block;margin: 30px;&quot;</span>&gt;</span>在设置-通用-关于本机-证书信任设置中将完全信任打开<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/images/iOS-%E8%87%AA%E5%8A%A8%E5%8C%96-%E6%89%93%E5%8C%85/WX20200820-183925@2x.png"></li>
</ol>
<h5 id="二-testflight-自动化公测"><a href="#二-testflight-自动化公测" class="headerlink" title="二. testflight 自动化公测"></a>二. testflight 自动化公测</h5><ol>
<li><p>方案一: 使用fastlane的upload_to_testflight</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">upload_to_testflight(</span><br><span class="line">      <span class="symbol">beta_app_review_info:</span> &#123;</span><br><span class="line">        <span class="symbol">contact_email:</span> <span class="string">&quot;xxxxx@xxx.net&quot;</span>,</span><br><span class="line">        <span class="symbol">contact_first_name:</span> <span class="string">&quot;xx&quot;</span>,</span><br><span class="line">        <span class="symbol">contact_last_name:</span> <span class="string">&quot;xx&quot;</span>,</span><br><span class="line">        <span class="symbol">contact_phone:</span> <span class="string">&quot;+xxxxxx&quot;</span>,</span><br><span class="line">        <span class="symbol">demo_account_name:</span> <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">        <span class="symbol">demo_account_password:</span> <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">        <span class="symbol">first_name:</span> <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">        <span class="symbol">last_name:</span> <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        <span class="symbol">email:</span> <span class="string">&quot;xxxxx@xxx.net&quot;</span>,</span><br><span class="line">    <span class="comment">#  true就不自动提审了</span></span><br><span class="line">        <span class="symbol">skip_waiting_for_build_processing:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="symbol">beta_app_feedback_email:</span><span class="string">&quot;xxxxx@xxx.net&quot;</span>,</span><br><span class="line">        <span class="symbol">beta_app_description:</span>options[<span class="symbol">:desc</span>],</span><br><span class="line">        <span class="symbol">demo_account_required:</span> <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">#构建是否应该分发给外部测试人员？</span></span><br><span class="line">        <span class="symbol">distribute_external:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">notify_external_testers:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">groups:</span> groups,</span><br><span class="line">        <span class="symbol">changelog:</span>options[<span class="symbol">:desc</span>],</span><br><span class="line">        <span class="symbol">ipa:</span> ipa_path,</span><br><span class="line">        <span class="symbol">localized_app_info:</span> &#123;</span><br><span class="line">          <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">            <span class="symbol">feedback_email:</span> <span class="string">&quot;xxxxx@xxx.net&quot;</span>,</span><br><span class="line">            <span class="symbol">description:</span> <span class="string">&quot;xxxxxxxxxxx&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;zh-Hans&quot;</span>: &#123;</span><br><span class="line">            <span class="symbol">feedback_email:</span> <span class="string">&quot;xxxxx@xxx.net&quot;</span>,</span><br><span class="line">            <span class="symbol">description:</span> <span class="string">&quot;xxxxxxxxx。&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="symbol">localized_build_info:</span> &#123;</span><br><span class="line">          <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">             <span class="symbol">whats_new:</span> options[<span class="symbol">:desc</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;zh-Hans&quot;</span>: &#123;</span><br><span class="line">             <span class="symbol">whats_new:</span> options[<span class="symbol">:desc</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>但这样有个问题，需要双重验证，通过fastlane spaceauth 生成的session一个月就过期了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 双重验证session一个月过期，执行下面方法输入验证码继续一个月</span></span><br><span class="line"><span class="comment"># fastlane spaceauth -u ios-develop@xxxxx.net</span></span><br><span class="line"><span class="built_in">export</span> FASTLANE_SESSION=<span class="string">&#x27;---\n- !ruby/object:HTTP::Cookie\n ........&#x27;</span></span><br><span class="line"><span class="built_in">export</span> FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=nqfn-rljf-jipw-kevb</span><br></pre></td></tr></table></figure>
<p>那这个方法其实不太能完美，只能利用 <a href="https://developer.apple.com/documentation/appstoreconnectapi">苹果自动化api</a>来实现</p>
</li>
<li><p>方案二：<a href="https://developer.apple.com/documentation/appstoreconnectapi">苹果自动化api</a></p>
<blockquote>
<p>先ruby封装几个函数</p>
</blockquote>
</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;base64&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;jwt&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line"><span class="comment"># 准备分支信息</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(branch,version,new_build,channel)</span></span></span><br><span class="line">    sh <span class="string">&quot;git checkout <span class="subst">#&#123;branch&#125;</span>&quot;</span></span><br><span class="line">    sh <span class="string">&quot;git pull origin <span class="subst">#&#123;branch&#125;</span>&quot;</span></span><br><span class="line">    increment_build_number(</span><br><span class="line">      <span class="symbol">build_number:</span> new_build,</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">&quot;xxxx.xcodeproj&quot;</span></span><br><span class="line">    ) </span><br><span class="line">    increment_version_number(<span class="symbol">version_number:</span> version)  </span><br><span class="line">    tag_string = <span class="string">&quot;<span class="subst">#&#123;channel&#125;</span>_<span class="subst">#&#123;version&#125;</span>.<span class="subst">#&#123;new_build&#125;</span>&quot;</span></span><br><span class="line">    sh <span class="string">&#x27;git add .&#x27;</span></span><br><span class="line">    git_commit(<span class="symbol">path:</span> <span class="string">&#x27;.&#x27;</span>, <span class="symbol">message:</span> tag_string)</span><br><span class="line">    push_to_git_remote(<span class="symbol">tags:</span> <span class="literal">false</span>)</span><br><span class="line">    add_git_tag(<span class="symbol">tag:</span> tag_string)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 上传蒲公英</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">uploadPgy</span><span class="params">(desc)</span></span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      pgyer(<span class="symbol">api_key:</span> <span class="string">&quot;xxxx&quot;</span>,<span class="symbol">user_key:</span> <span class="string">&quot;xxxx&quot;</span>,<span class="symbol">update_description:</span><span class="string">&quot;<span class="subst">#&#123;desc&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">rescue</span></span><br><span class="line">      <span class="keyword">retry</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 审核状态</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getBuildState</span><span class="params">(buildid)</span></span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      jwt_token = getToken()</span><br><span class="line">      externalBuildState =  <span class="string">%x(curl  -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -s -X GET   https://api.appstoreconnect.apple.com/v1/buildBetaDetails/<span class="subst">#&#123;buildid&#125;</span>  )</span></span><br><span class="line">      state = JSON.parse(externalBuildState)</span><br><span class="line">      buildstate = state[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;attributes&quot;</span>][<span class="string">&quot;externalBuildState&quot;</span>]</span><br><span class="line">      <span class="keyword">rescue</span></span><br><span class="line">      <span class="keyword">retry</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 内审状态</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getInternalBuildState</span><span class="params">(buildid)</span></span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      jwt_token = getToken()</span><br><span class="line">      externalBuildState =  <span class="string">%x(curl  -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -s -X GET   https://api.appstoreconnect.apple.com/v1/buildBetaDetails/<span class="subst">#&#123;buildid&#125;</span>  )</span></span><br><span class="line">      state = JSON.parse(externalBuildState)</span><br><span class="line">      buildstate = state[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;attributes&quot;</span>][<span class="string">&quot;internalBuildState&quot;</span>]</span><br><span class="line">      <span class="keyword">rescue</span></span><br><span class="line">      <span class="keyword">retry</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 获取build</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">getBetaBuild</span><span class="params">(new_build)</span></span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    jwt_token = getToken()</span><br><span class="line">    buildJson =  <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X GET https://api.appstoreconnect.apple.com/v1/builds?filter[version]=<span class="subst">#&#123;new_build&#125;</span>)</span></span><br><span class="line">    buildJsonParse = JSON.parse(buildJson)</span><br><span class="line">    buildid = buildJsonParse[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    <span class="keyword">rescue</span></span><br><span class="line">      sleep <span class="number">5</span> * <span class="number">60</span></span><br><span class="line">    <span class="keyword">retry</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># 测试人员添加测试组中</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getBetaTesters</span><span class="params">(groupid)</span></span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      jwt_token = getToken()</span><br><span class="line">      betaTesters = <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X POST -d &#x27;&#123;&quot;data&quot;: &#123;&quot;type&quot;: &quot;betaTesters&quot;,&quot;attributes&quot;: &#123;&quot;firstName&quot;:&quot;xx&quot;,&quot;lastName&quot;:&quot;xx&quot;,&quot;email&quot;:&quot;xx@xxx.net&quot;&#125;,&quot;relationships&quot;: &#123;&quot;betaGroups&quot;:&#123;&quot;data&quot;:[&#123;&quot;type&quot;:&quot;betaGroups&quot;,&quot;id&quot;:&quot;<span class="subst">#&#123;groupid&#125;</span>&quot;&#125;]&#125;&#125;&#125;&#125;&#x27; https://api.appstoreconnect.apple.com/v1/betaTesters)</span></span><br><span class="line">      puts <span class="string">&quot;将测试人员添加到组中: <span class="subst">#&#123;betaTesters&#125;</span>&quot;</span></span><br><span class="line">      betaTestersData = JSON.parse(betaTesters)</span><br><span class="line">      id = betaTestersData[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;id&quot;</span>]</span><br><span class="line">      <span class="keyword">rescue</span></span><br><span class="line">        sleep <span class="number">5</span> * <span class="number">60</span></span><br><span class="line">      <span class="keyword">retry</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 创建组</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createGroup</span><span class="params">(groups)</span></span></span><br><span class="line">    jwt_token = getToken()</span><br><span class="line">    puts <span class="string">&quot;令牌:<span class="subst">#&#123;jwt_token&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 创建组</span></span><br><span class="line">    groupJson = <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X POST -d &#x27;&#123;&quot;data&quot;: &#123;&quot;type&quot;: &quot;betaGroups&quot;,&quot;attributes&quot;: &#123;&quot;name&quot;:&quot;<span class="subst">#&#123;groups&#125;</span>&quot;&#125;,&quot;relationships&quot;: &#123;&quot;app&quot;: &#123;&quot;data&quot;:&#123;&quot;type&quot;:&quot;apps&quot;,&quot;id&quot;:&quot;xxxx&quot;&#125;&#125;&#125;&#125;&#125;&#x27; https://api.appstoreconnect.apple.com/v1/betaGroups)</span></span><br><span class="line">    groupJsonParse = JSON.parse(groupJson)</span><br><span class="line">    groupid = groupJsonParse[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;id&quot;</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># build添加测试组中</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addBetaGroups</span><span class="params">(groupid,buildid)</span></span></span><br><span class="line">      jwt_token = getToken()</span><br><span class="line">      <span class="comment"># 将版本添加到组中</span></span><br><span class="line">      insertBetaGroups = <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X POST -d &#x27;&#123;&quot;data&quot;: [&#123;&quot;type&quot;: &quot;builds&quot;,&quot;id&quot;:&quot;<span class="subst">#&#123;buildid&#125;</span>&quot;&#125;]&#125;&#x27; https://api.appstoreconnect.apple.com/v1/betaGroups/<span class="subst">#&#123;groupid&#125;</span>/relationships/builds)</span></span><br><span class="line">      puts <span class="string">&quot;将版本添加到组中: <span class="subst">#&#123;insertBetaGroups&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 获取本地化id</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getBetaBuildLocalizationsid</span><span class="params">(buildid,desc)</span></span></span><br><span class="line">      jwt_token = getToken()</span><br><span class="line">      createBetaBuildLocalizationsJson =  <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X POST -d &#x27;&#123; &quot;data&quot;: &#123;&quot;type&quot;: &quot;betaBuildLocalizations&quot;,&quot;attributes&quot;: &#123;&quot;whatsNew&quot;: &quot;<span class="subst">#&#123;desc&#125;</span>&quot;,&quot;locale&quot;:&quot;zh-Hans&quot;&#125;,&quot;relationships&quot;: &#123;&quot;build&quot;:&#123;&quot;data&quot;:&#123;&quot;id&quot;:&quot;<span class="subst">#&#123;buildid&#125;</span>&quot;,&quot;type&quot;:&quot;builds&quot;&#125;&#125;&#125;&#125;&#125;&#x27; https://api.appstoreconnect.apple.com/v1/betaBuildLocalizations)</span></span><br><span class="line">      puts <span class="string">&quot;createBetaBuildLocalizationsJson: <span class="subst">#&#123;createBetaBuildLocalizationsJson&#125;</span>&quot;</span></span><br><span class="line">      betaBuildLocalizationsJson =  <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X GET https://api.appstoreconnect.apple.com/v1/betaBuildLocalizations?filter[build]=<span class="subst">#&#123;buildid&#125;</span>&amp;filter[locale]=zh-Hans)</span></span><br><span class="line">      betaBuildLocalizationsParse = JSON.parse(betaBuildLocalizationsJson)</span><br><span class="line">      puts <span class="string">&quot;betaBuildLocalizationsJson: <span class="subst">#&#123;betaBuildLocalizationsJson&#125;</span>&quot;</span></span><br><span class="line">      betaBuildLocalizationsid = betaBuildLocalizationsParse[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;id&quot;</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 本地化信息</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">patchBetaBuildLocalizations</span><span class="params">(betaBuildLocalizationsid,desc)</span></span></span><br><span class="line">      jwt_token = getToken()</span><br><span class="line">      patchBetaBuildLocalizations = <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X PATCH -d &#x27;&#123; &quot;data&quot;: &#123;&quot;type&quot;: &quot;betaBuildLocalizations&quot;,&quot;attributes&quot;: &#123;&quot;whatsNew&quot;: &quot;<span class="subst">#&#123;desc&#125;</span>&quot;&#125;,&quot;id&quot;: &quot;<span class="subst">#&#123;betaBuildLocalizationsid&#125;</span>&quot;&#125;&#125;&#x27; https://api.appstoreconnect.apple.com/v1/betaBuildLocalizations/<span class="subst">#&#123;betaBuildLocalizationsid&#125;</span>)</span></span><br><span class="line">      puts <span class="string">&quot;本地化信息: <span class="subst">#&#123;patchBetaBuildLocalizations&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="comment"># 启用公测链接</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getPublic_link</span><span class="params">(groupid,groups)</span></span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      jwt_token = getToken()</span><br><span class="line">      public_link_json = <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X PATCH -d &#x27;&#123;&quot;data&quot;: &#123;&quot;type&quot;: &quot;betaGroups&quot;,&quot;id&quot;: &quot;<span class="subst">#&#123;groupid&#125;</span>&quot;,&quot;attributes&quot;: &#123;&quot;name&quot;: &quot;<span class="subst">#&#123;groups&#125;</span>&quot;,&quot;publicLinkEnabled&quot;: true,&quot;publicLinkLimitEnabled&quot;: false,&quot;publicLinkLimit&quot;: null,&quot;feedbackEnabled&quot;: true&#125;&#125;&#125;&#x27; https://api.appstoreconnect.apple.com/v1/betaGroups/<span class="subst">#&#123;groupid&#125;</span>)</span></span><br><span class="line">      puts <span class="string">&quot;链接请求: <span class="subst">#&#123;public_link_json&#125;</span>&quot;</span></span><br><span class="line">      public_link_json_parse = JSON.parse(public_link_json)</span><br><span class="line">      public_link = public_link_json_parse[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;attributes&quot;</span>][<span class="string">&quot;publicLink&quot;</span>]</span><br><span class="line">      <span class="keyword">rescue</span></span><br><span class="line">        sleep <span class="number">5</span> * <span class="number">60</span></span><br><span class="line">      <span class="keyword">retry</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 获取苹果凭据token</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getToken</span> </span></span><br><span class="line">    private_key = OpenSSL::PKey.read(File.read(<span class="string">&quot;/Users/admin/AuthKey_xxxxx.p8&quot;</span>))</span><br><span class="line">    token = JWT.encode(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="symbol">iss:</span> <span class="string">&quot;xxxxx-xxxx-xxxxxx-xxxx-xxxxxx&quot;</span>,</span><br><span class="line">      <span class="symbol">exp:</span> Time.now.to_i + <span class="number">20</span> * <span class="number">60</span>,</span><br><span class="line">      <span class="symbol">aud:</span> <span class="string">&quot;appstoreconnect-v1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    private_key,</span><br><span class="line">    <span class="string">&quot;ES256&quot;</span>,</span><br><span class="line">    header_fields=&#123;<span class="symbol">kid:</span> <span class="string">&quot;xxxxx&quot;</span> &#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>此处根据 <a href="https://developer.apple.com/documentation/appstoreconnectapi">苹果自动化api</a>文档先本地通过postman去调试验证，如下图，header中的Authorization为key，value为 “Bearer 苹果凭据token”</p>
<p><img src="/images/iOS-%E8%87%AA%E5%8A%A8%E5%8C%96-%E6%89%93%E5%8C%85/WX20200821-111336@2x.png"></p>
<p>具体实现</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">desc <span class="string">&quot;发布testflight版本&quot;</span></span><br><span class="line">  lane <span class="symbol">:testflight</span> <span class="keyword">do</span>  <span class="params">|options|</span></span><br><span class="line">    <span class="comment">#新建build号</span></span><br><span class="line">    new_build = options[<span class="symbol">:new_build</span>]</span><br><span class="line">    desc = options[<span class="symbol">:desc</span>]</span><br><span class="line">    puts <span class="string">&quot;desc:<span class="subst">#&#123;desc&#125;</span>&quot;</span></span><br><span class="line">    time = Time.new.strftime(<span class="string">&quot;%Y-%m-%d-%H:%M:%S&quot;</span>)</span><br><span class="line">    increment_build_number(</span><br><span class="line">      <span class="symbol">build_number:</span> new_build,</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">&quot;xxxx.xcodeproj&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    new_version = options[<span class="symbol">:new_version</span>]</span><br><span class="line">    <span class="keyword">if</span> !new_version.empty?</span><br><span class="line">     increment_version_number(<span class="symbol">version_number:</span> new_version)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    sh(<span class="string">&quot;pod repo update&quot;</span>)</span><br><span class="line">    <span class="comment"># 拉取代码</span></span><br><span class="line">    cocoapods</span><br><span class="line">    <span class="comment"># 获取版本号</span></span><br><span class="line">    version = get_version_number(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">&quot;xxxx.xcodeproj&quot;</span>,</span><br><span class="line">      <span class="symbol">target:</span> <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 打包环境</span></span><br><span class="line">    configuration = <span class="string">&quot;Release&quot;</span></span><br><span class="line">    ipaName=<span class="string">&quot;xxxx&quot;</span></span><br><span class="line">    ipaPath=configuration + <span class="string">&quot;/&quot;</span> + version + <span class="string">&quot;.&quot;</span> + new_build + <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="comment"># 导出ipa包地址</span></span><br><span class="line">    output_directory = <span class="string">&quot;/Users/admin/WebSites/app/ipa/&quot;</span> + ipaPath</span><br><span class="line">    <span class="comment">#manifest.plilst需要的参数</span></span><br><span class="line">    ipaUrl=<span class="string">&#x27;https://10.104.33.114/app/ipa/&#x27;</span> + ipaPath + ipaName + <span class="string">&#x27;.ipa&#x27;</span></span><br><span class="line">    plistPath = <span class="string">&#x27;https://10.104.33.114/app/ipa/&#x27;</span> + ipaPath + <span class="string">&#x27;manifest.plist&#x27;</span></span><br><span class="line">    pngName = version + <span class="string">&quot;.&quot;</span> + new_build + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    disImg =<span class="string">&#x27;https://10.104.33.114/app/icon/&#x27;</span> + pngName</span><br><span class="line">    gym(</span><br><span class="line">      <span class="symbol">scheme:</span> <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">      <span class="symbol">workspace:</span> <span class="string">&quot;xxx.xcworkspace&quot;</span>,</span><br><span class="line">      <span class="symbol">export_method:</span><span class="string">&quot;app-store&quot;</span>,</span><br><span class="line">      <span class="symbol">export_xcargs:</span> <span class="string">&quot;-allowProvisioningUpdates&quot;</span>,</span><br><span class="line">      <span class="symbol">output_directory:</span> output_directory,<span class="comment">#文件路径</span></span><br><span class="line">      <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">configuration:</span> configuration,</span><br><span class="line">      <span class="symbol">export_options:</span>&#123;</span><br><span class="line">         <span class="symbol">manifest:</span> &#123;</span><br><span class="line">             <span class="symbol">appURL:</span> ipaUrl,</span><br><span class="line">             <span class="symbol">displayImageURL:</span> disImg,</span><br><span class="line">             <span class="symbol">fullSizeImageURL:</span> disImg</span><br><span class="line">             &#125;,</span><br><span class="line">         &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    ipa_path = output_directory + ipaName + <span class="string">&#x27;.ipa&#x27;</span></span><br><span class="line">    groups = version + <span class="string">&quot;.&quot;</span> + new_build</span><br><span class="line">    apiIssuer = <span class="string">&quot;xxxxxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    apiKey = <span class="string">&quot;xxxxxx&quot;</span>;</span><br><span class="line">    <span class="string">`xcrun altool --validate-app -f <span class="subst">#&#123;ipa_path&#125;</span>  -t ios --apiKey <span class="subst">#&#123;apiKey&#125;</span> --apiIssuer <span class="subst">#&#123;apiIssuer&#125;</span>`</span></span><br><span class="line">    validate_status = <span class="string">`echo $?`</span></span><br><span class="line">    puts <span class="string">&quot;======================== validate ========================&quot;</span></span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;validate_status&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> Integer(validate_status) != <span class="number">0</span></span><br><span class="line">      puts <span class="string">&quot;======================== 验证出错 ========================&quot;</span></span><br><span class="line">      exit</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    puts <span class="string">&quot;======================== 验证成功 ========================&quot;</span></span><br><span class="line">    <span class="string">`xcrun altool --upload-app -f <span class="subst">#&#123;ipa_path&#125;</span> -t ios --apiKey <span class="subst">#&#123;apiKey&#125;</span> --apiIssuer <span class="subst">#&#123;apiIssuer&#125;</span>`</span></span><br><span class="line">    upload_status = <span class="string">`echo $?`</span></span><br><span class="line">    puts <span class="string">&quot;======================== upload ========================&quot;</span></span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;upload_status&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> Integer(upload_status) != <span class="number">0</span></span><br><span class="line">      puts <span class="string">&quot;======================== 上传出错 ========================&quot;</span></span><br><span class="line">      exit</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    puts <span class="string">&quot;======================== 上传成功 ========================&quot;</span></span><br><span class="line">    size =<span class="string">`echo $(wc -c &lt; <span class="subst">#&#123;output_directory&#125;</span><span class="subst">#&#123;ipaName&#125;</span>.ipa)`</span></span><br><span class="line">    desc = URI::encode(options[<span class="symbol">:desc</span>])</span><br><span class="line">    appBuildURL = <span class="string">&quot;http://10.104.33.114/app/index.html?&quot;</span> + <span class="string">&quot;version=&quot;</span> + version + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;build=&quot;</span> + new_build + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;size=&quot;</span> + size.strip + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;time=&quot;</span> + time + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;desc=&quot;</span> + desc + <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;pngName=&quot;</span> + pngName + <span class="string">&quot;&amp;&quot;</span> +  <span class="string">&quot;plistUrl=&quot;</span> + plistPath</span><br><span class="line">    myqrAppBuildURL = <span class="string">&quot;http://10.104.33.114/app/index.html?&quot;</span> + <span class="string">&quot;version=&quot;</span> + version + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;build=&quot;</span> + new_build + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;size=&quot;</span> + size.strip + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;time=&quot;</span> + time + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;desc=&quot;</span> + desc + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;pngName=&quot;</span> + pngName + <span class="string">&quot;\\&amp;&quot;</span> + <span class="string">&quot;plistUrl=&quot;</span> + plistPath</span><br><span class="line">    appQRCodeURL = <span class="string">&quot;http://10.104.33.114/app/icon/&quot;</span> + pngName</span><br><span class="line">    cpath = sh(<span class="string">&quot;pwd&quot;</span>).strip</span><br><span class="line">    <span class="string">`rm -rf <span class="subst">#&#123;cpath&#125;</span>/qrcode.png`</span></span><br><span class="line">    <span class="string">`myqr <span class="subst">#&#123;myqrAppBuildURL&#125;</span>`</span></span><br><span class="line">    <span class="string">`mv <span class="subst">#&#123;cpath&#125;</span>/qrcode.png /Users/admin/WebSites/app/icon/<span class="subst">#&#123;pngName&#125;</span>`</span></span><br><span class="line">    UI.message <span class="string">&quot;appBuildURL:<span class="subst">#&#123;appBuildURL&#125;</span>&quot;</span></span><br><span class="line">    UI.message <span class="string">&quot;appQRCodeURL:<span class="subst">#&#123;appQRCodeURL&#125;</span>&quot;</span></span><br><span class="line">    description = <span class="string">&quot;公测包：&quot;</span>+ groups</span><br><span class="line">    UI.message <span class="string">&quot;description:<span class="subst">#&#123;description&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取build</span></span><br><span class="line">    buildJson = getBetaBuild(new_build)</span><br><span class="line">    puts <span class="string">&quot;buildid:<span class="subst">#&#123;buildid&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 轮询</span></span><br><span class="line">    internalBuildStat =  getInternalBuildState(buildid)</span><br><span class="line">    puts <span class="string">&quot;提交内审状态:<span class="subst">#&#123;internalBuildStat&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> !(internalBuildStat.casecmp?(<span class="string">&quot;IN_BETA_TESTING&quot;</span>))  <span class="keyword">do</span></span><br><span class="line">      sleep <span class="number">5</span> * <span class="number">60</span></span><br><span class="line">      internalBuildStat =  getInternalBuildState(buildid)</span><br><span class="line">      puts <span class="string">&quot;提交内审状态:<span class="subst">#&#123;internalBuildStat&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发出企业微信通知：可以提交审核</span></span><br><span class="line">    sleep <span class="number">5</span> * <span class="number">60</span></span><br><span class="line">    jwt_token = getToken()</span><br><span class="line">    <span class="comment"># 提交审核</span></span><br><span class="line">    betaAppReviewSubmissions = <span class="string">%x(curl -H &quot;Authorization: Bearer <span class="subst">#&#123;jwt_token&#125;</span>&quot; -H &quot;Content-type: application/json&quot; -X POST -d &#x27;&#123;&quot;data&quot;: &#123;&quot;type&quot;: &quot;betaAppReviewSubmissions&quot;,&quot;relationships&quot;: &#123;&quot;build&quot;: &#123;&quot;data&quot;:&#123;&quot;type&quot;:&quot;builds&quot;,&quot;id&quot;:&quot;<span class="subst">#&#123;buildid&#125;</span>&quot;&#125;&#125;&#125;&#125;&#125;&#x27; https://api.appstoreconnect.apple.com/v1/betaAppReviewSubmissions)</span></span><br><span class="line">    puts <span class="string">&quot;审核请求结果:<span class="subst">#&#123;betaAppReviewSubmissions&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取审核状态</span></span><br><span class="line">    buildstate =  getBuildState(buildid)</span><br><span class="line">    puts <span class="string">&quot;审核状态:<span class="subst">#&#123;buildstate&#125;</span>&quot;</span></span><br><span class="line">    laststate = buildstate</span><br><span class="line">    <span class="keyword">if</span> buildstate.casecmp?(<span class="string">&quot;WAITING_FOR_BETA_REVIEW&quot;</span>)</span><br><span class="line">      <span class="comment"># 发出企业微信通知：等待审核状态</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> buildstate.casecmp?(<span class="string">&quot;IN_REVIEW&quot;</span>)</span><br><span class="line">      <span class="comment"># 发出企业微信通知</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 轮询查看审核状态（每隔10分钟）</span></span><br><span class="line">    <span class="keyword">while</span> !(buildstate.casecmp?(<span class="string">&quot;IN_BETA_TESTING&quot;</span>) <span class="params">||</span> buildstate.casecmp?(<span class="string">&quot;APPROVED&quot;</span>) <span class="params">||</span> buildstate.casecmp?(<span class="string">&quot;REJECTED&quot;</span>) <span class="params">||</span> buildstate.casecmp?(<span class="string">&quot;BETA_APPROVED&quot;</span>) <span class="params">||</span> buildstate.casecmp?(<span class="string">&quot;BETA_REJECTED&quot;</span>))  <span class="keyword">do</span></span><br><span class="line">      sleep <span class="number">10</span> * <span class="number">60</span></span><br><span class="line">      buildstate =  getBuildState(buildid)</span><br><span class="line">      <span class="keyword">if</span> !laststate.casecmp?(buildstate)</span><br><span class="line">        <span class="keyword">if</span> (buildstate.casecmp?(<span class="string">&quot;IN_REVIEW&quot;</span>) <span class="params">||</span> buildstate.casecmp?(<span class="string">&quot;IN_BETA_REVIEW&quot;</span>))</span><br><span class="line">          <span class="comment"># 发出企业微信通知</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="comment"># 发出企业微信通知</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      laststate =  buildstate;</span><br><span class="line">      puts <span class="string">&quot;审核状态:<span class="subst">#&#123;buildstate&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (buildstate.casecmp?(<span class="string">&quot;REJECTED&quot;</span>) <span class="params">||</span> buildstate.casecmp?(<span class="string">&quot;BETA_REJECTED&quot;</span>))</span><br><span class="line">      <span class="comment"># 发出企业微信通知：等待审核状态</span></span><br><span class="line">        puts <span class="string">&quot;<span class="subst">#&#123;groups&#125;</span> 公测审核被拒，请前往App Store查看原因&quot;</span></span><br><span class="line">        exit</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (buildstate.casecmp?(<span class="string">&quot;IN_BETA_TESTING&quot;</span>) <span class="params">||</span> buildstate.casecmp?(<span class="string">&quot;APPROVED&quot;</span>) <span class="params">||</span> buildstate.casecmp?(<span class="string">&quot;BETA_APPROVED&quot;</span>))</span><br><span class="line"></span><br><span class="line">      jwt_token = getToken()</span><br><span class="line">      puts <span class="string">&quot;令牌:<span class="subst">#&#123;jwt_token&#125;</span>&quot;</span></span><br><span class="line">      <span class="comment"># 创建组</span></span><br><span class="line">      groupid = createGroup(groups)</span><br><span class="line">      puts <span class="string">&quot;获取到组id:<span class="subst">#&#123;groupid&#125;</span>&quot;</span></span><br><span class="line">      sleep <span class="number">5</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 将测试人员添加到组中</span></span><br><span class="line">      getBetaTesters(groupid)</span><br><span class="line">      sleep <span class="number">5</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 将build添加到组中</span></span><br><span class="line">      addBetaGroups(groupid,buildid)</span><br><span class="line">      sleep <span class="number">5</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#获取本地化id</span></span><br><span class="line">      betaBuildLocalizationsid = getBetaBuildLocalizationsid(buildid,options[<span class="symbol">:desc</span>])</span><br><span class="line">      puts <span class="string">&quot;betaBuildLocalizationsid:<span class="subst">#&#123;betaBuildLocalizationsid&#125;</span>&quot;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">#修改本地化测试信息</span></span><br><span class="line">      patchBetaBuildLocalizations(betaBuildLocalizationsid,options[<span class="symbol">:desc</span>])</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 启用公测链接</span></span><br><span class="line">      public_link = getPublic_link(groupid,groups)</span><br><span class="line">      puts <span class="string">&quot;公测链接: <span class="subst">#&#123;public_link&#125;</span>&quot;</span></span><br><span class="line">      new_branch = options[<span class="symbol">:new_branch</span>]</span><br><span class="line">      prepare(new_branch,version,new_build,<span class="string">&#x27;testflight&#x27;</span>)</span><br><span class="line">      push_git_tags</span><br><span class="line">      <span class="comment"># 上传bugly</span></span><br><span class="line">      dsymFilePath = output_directory + <span class="string">&#x27;xxxx.app.dSYM.zip&#x27;</span></span><br><span class="line">      upload_dsym_to_bugly(</span><br><span class="line">        <span class="symbol">file_path:</span> <span class="string">&quot;<span class="subst">#&#123;dsymFilePath&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="symbol">file_name:</span> <span class="string">&quot;%e8%b6%axxxxxxx%.app.dSYM.zip&quot;</span>,</span><br><span class="line">        <span class="symbol">app_key:</span> <span class="string">&quot;xxxxxxx&quot;</span>,</span><br><span class="line">        <span class="symbol">app_id:</span><span class="string">&quot;xxxxxxx&quot;</span>,</span><br><span class="line">        <span class="symbol">api_version:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="symbol">symbol_type:</span> <span class="number">2</span>, <span class="comment"># iOS =&gt; 2, Android =&gt; 1</span></span><br><span class="line">        <span class="symbol">bundle_id:</span> <span class="string">&#x27;com.xxxx.xxxx&#x27;</span>,</span><br><span class="line">        <span class="symbol">product_version:</span> <span class="string">&quot;<span class="subst">#&#123;groups&#125;</span>&quot;</span></span><br><span class="line">      ) </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h5><ol>
<li>公测自动化实现后，App Store打包通过打包验证和上传也很容易实现</li>
<li>Jenkins + fastlane 较为方便的实现可持续集成自动化的流程</li>
<li>python、ruby、shell等语言实现脚本思想一样，哪个方便用哪个</li>
<li>能工具化提高效率的尽量工具化自动化，为公司节省人力，提高工作效率</li>
<li>消息通知最终流程过程或结果可以采用邮件、webhook机器人消息等</li>
</ol>
]]></content>
      <categories>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS LLVM-Clang 浅谈</title>
    <url>/2020/08/22/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/</url>
    <content><![CDATA[<h5 id="LLVM概念"><a href="#LLVM概念" class="headerlink" title="LLVM概念"></a>LLVM概念</h5><ol>
<li>LLVM官网: <a href="https://llvm.org/">https://llvm.org/</a> </li>
<li>编译器架构图:<br><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-162208.png"></li>
</ol>
<ul>
<li>Frontend:前端 → 词法分析、语法分析、语义分析、生成中间代码(LLVM IR) </li>
<li>Optimizer:优化器 → 中间代码优化</li>
<li>Backend:后端 → 生成机器码</li>
<li>传统编译器(如 CGG )的前端和后端没有完全分离，耦合在了一起，因而如果要支持一门新的语言或硬件平台，需要做大量的工作。<a id="more"></a>
<img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-162609.png"></li>
<li>不同的前端后端使用统一的中间代码LLVM Intermediate Representation (LLVM IR)<ul>
<li><ol>
<li>LLVM IR格式以 .ll结尾、以 .bc 的二进制格式结尾、内存格式</li>
</ol>
</li>
<li><ol start="2">
<li>Bitcode(Xcode 7之后)就是以.bc结尾的中间代码，是LLVM-IR在磁盘上的一种二进制表示形式。例如:clang -c -emit-llvm xxxx.m 生成 xxxx. bc</li>
</ol>
</li>
<li><ol start="3">
<li>如果要转换成文本格式查看，例如:llvm-dis xxxx.bc -o xxxx.ll</li>
</ol>
</li>
<li><ol start="4">
<li>苹果单独对 Bitcode 进行了额外的优化.<ul>
<li>i) 应用上传到 AppStore时，Xcode会将程序对应的 Bitcode一起上传; </li>
<li>ii) AppStore会将 Bitcode重新编译为可执行程序，供用户下载;</li>
<li>iii) Bitcode被Xcode打包成 xar文档，嵌入的 MachO中。 </li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>如果需要支持一种新的编程语言、硬件设备，那么只需要实现一个新的前后端</li>
</ul>
<ol start="3">
<li>LLVM 同时支持 AOT 预先编译和 JIT 即时编译</li>
</ol>
<h5 id="Clang概念"><a href="#Clang概念" class="headerlink" title="Clang概念"></a>Clang概念</h5><ol>
<li>官网:<a href="http://clang.llvm.org/">http://clang.llvm.org/</a></li>
<li>Clang项目为LLVM 项目的C语言系列(C，C ++，Objective C / C ++，OpenCL，CUDA和RenderScript)中的语言提供语言前端和工具基础结构。提供了与GCC兼容的编译器驱动程序(clang)和与MSVC兼容的编译器驱动程序(clang-cl.exe) </li>
<li>说白了就是LLVM项目的一个子项目，LLVM的C语言家族前端。 </li>
<li>相比于GCC，Clang具有如下优点<ul>
<li>编译速度快:在某些平台上，Clang的编译速度显著的快过GCC(Debug模式下编译OC速度比GGC快3倍) </li>
<li>占用内存小:Clang生成的AST所占用的内存是GCC的五分之一左右 </li>
<li>模块化设计:Clang采用基于库的模块化设计，易于IDE 集成及其他用途的重用 </li>
<li>诊断信息可读性强:在编译过程中，Clang 创建并保留了大量详细的元数据(metadata)，有利于调试和错误报告 </li>
<li>设计清晰简单，容易理解，易于扩展增强</li>
</ul>
</li>
</ol>
<h5 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h5><p><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-163910.png"></p>
<ol>
<li>Objective-C与swift都采用Clang作为编译器前端，编译器前端主要进行词法分析、语法分析、语义分析、生成中间代码，在这个过程中，会进行类型 检查，如果发现错误或者警告会标注出来在哪一行。</li>
<li>编译器后端会进行机器无关的代码优化，生成机器语言，并且进行机器相关的代码优化，根据不同的系统架构生成不同的机器码。<br><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-164702.png"></li>
</ol>
<h5 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h5><p><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-164758.png"><br>执行oclint自带脚本scaffoldRule:<br>cd ~/oclint/oclint-scripts<br>./scaffoldRule Property -t ASTVisitor(参数可选为Generic,SourceCodeReader,ASTVisitor,ASTMatcher)</p>
<h5 id="加载自定义规则Xcode项目"><a href="#加载自定义规则Xcode项目" class="headerlink" title="加载自定义规则Xcode项目"></a>加载自定义规则Xcode项目</h5><blockquote>
<p>oclint-xcoderules目录下，执行create-xcode-rules.sh脚本 </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh -e</span></span><br><span class="line">cmake -G Xcode \</span><br><span class="line">        -D CMAKE_CXX_COMPILER=../build/llvm-install/bin/clang++ \ </span><br><span class="line">        -D CMAKE_C_COMPILER=../build/llvm-install/bin/clang \</span><br><span class="line">        -D OCLINT_BUILD_DIR=../build/oclint-core \</span><br><span class="line">        -D OCLINT_SOURCE_DIR=../oclint-core \</span><br><span class="line">        -D OCLINT_METRICS_SOURCE_DIR=../oclint-metrics </span><br><span class="line">        \ -D OCLINT_METRICS_BUILD_DIR=../build/oclint-metrics \</span><br><span class="line">        -D LLVM_ROOT=../build/llvm-install/../oclint-rules</span><br></pre></td></tr></table></figure>

<h5 id="编译自定义项目生成dylib文件"><a href="#编译自定义项目生成dylib文件" class="headerlink" title="编译自定义项目生成dylib文件"></a>编译自定义项目生成dylib文件</h5><p>复制到~/oclint/build/oclint-release/lib/oclint/rules下</p>
<h5 id="调试规则"><a href="#调试规则" class="headerlink" title="调试规则"></a>调试规则</h5><p><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-165241.png"><br>以下编译环境是在测试demo中的，添加到scheme下的run配置中:<br><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-165317.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-R&#x3D;&#x2F;Users&#x2F;libing&#x2F;oclint&#x2F;oclint-xcoderules&#x2F;rules.dl&#x2F;Debug &#x2F;Users&#x2F;libing&#x2F;oclint&#x2F;oclint-xcodebuild&#x2F;TestRule&#x2F;TestRule&#x2F;ViewController.m -- -x objective-c -isystem ~&#x2F;oclint&#x2F;build&#x2F;oclint-release&#x2F;lib&#x2F;clang&#x2F;5.0.1&#x2F;include&#x2F; -arch x86_64 -fmessage-length&#x3D;0 -fdiagnostics-show-note-include- stack -fmacro-backtrace-limit&#x3D;0 -std&#x3D;gnu11 -fobjc-arc -fobjc-weak -fmodules -gmodules -fmodules-cache-path&#x3D;&#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode &#x2F;DerivedData&#x2F;ModuleCache.noindex -fmodules-prune-interval&#x3D;86400 -fmodules-prune-after&#x3D;345600 -fbuild-session-file&#x3D;&#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode &#x2F;DerivedData&#x2F;ModuleCache.noindex&#x2F;Session.modulevalidation -fmodules-validate-once-per-build-session -Wnon-modular-include-in-framework-module - Werror&#x3D;non-modular-include-in-framework-module -Wno-trigraphs -fpascal-strings -O0 -fno-common -Wno-missing-field-initializers -Wno-missing-prototypes - Werror&#x3D;return-type -Wdocumentation -Wunreachable-code -Wno-implicit-atomic-properties -Werror&#x3D;deprecated-objc-isa-usage -Wno-objc-interface-ivars - Werror&#x3D;objc-root-class -Wno-arc-repeated-use-of-weak -Wimplicit-retain-self -Wduplicate-method-match -Wno-missing-braces -Wparentheses -Wswitch - Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wuninitialized -Wconditional-uninitialized - Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum- conversion -Wno-float-conversion -Wnon-literal-null-conversion -Wobjc-literal-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno- selector -Wno-strict-selector-match -Wundeclared-selector -Wdeprecated-implementations -DDEBUG&#x3D;1 -DOBJC_OLD_DISPATCH_PROTOTYPES&#x3D;0 -isysroot &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneSimulator.platform&#x2F;Developer&#x2F;SDKs&#x2F;iPhoneSimulator12.2.sdk -fasm-blocks -fstrict-aliasing - Wprotocol -Wdeprecated-declarations -mios-simulator-version-min&#x3D;12.2 -g -Wno-sign-conversion -Winfinite-recursion -Wcomma -Wblock-capture- autoreleasing -Wstrict-prototypes -Wno-semicolon-before-method-body -Wunguarded-availability -fobjc-abi-version&#x3D;2 -fobjc-legacy-dispatch -index-store- path &#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Index&#x2F;DataStore -iquote &#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer &#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build&#x2F;Debug-iphonesimulator&#x2F;TestRule.build&#x2F;TestRule- generated-files.hmap -I&#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build &#x2F;Debug-iphonesimulator&#x2F;TestRule.build&#x2F;TestRule-own-target-headers.hmap -I&#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule- fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build&#x2F;Debug-iphonesimulator&#x2F;TestRule.build&#x2F;TestRule-all-target-headers.hmap -iquote &#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build&#x2F;Debug-iphonesimulator &#x2F;TestRule.build&#x2F;TestRule-project-headers.hmap -I&#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Products &#x2F;Debug-iphonesimulator&#x2F;include -I&#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex &#x2F;TestRule.build&#x2F;Debug-iphonesimulator&#x2F;TestRule.build&#x2F;DerivedSources-normal&#x2F;x86_64 -I&#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule- fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build&#x2F;Debug-iphonesimulator&#x2F;TestRule.build&#x2F;DerivedSources&#x2F;x86_64 -I&#x2F;Users&#x2F;libing&#x2F;Library &#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build&#x2F;Debug-iphonesimulator&#x2F;TestRule.build &#x2F;DerivedSources -F&#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Products&#x2F;Debug-iphonesimulator -MMD - MT dependencies -MF &#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build &#x2F;Debug-iphonesimulator&#x2F;TestRule.build&#x2F;Objects-normal&#x2F;x86_64&#x2F;ViewController.d --serialize-diagnostics &#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData &#x2F;TestRule-fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build&#x2F;Debug-iphonesimulator&#x2F;TestRule.build&#x2F;Objects-normal&#x2F;x86_64 &#x2F;ViewController.dia -c &#x2F;Users&#x2F;libing&#x2F;oclint&#x2F;oclint-xcodebuild&#x2F;TestRule&#x2F;TestRule&#x2F;ViewController.m -o &#x2F;Users&#x2F;libing&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;TestRule- fnyamuwmajnavbcsgeuhbzloxpbs&#x2F;Build&#x2F;Intermediates.noindex&#x2F;TestRule.build&#x2F;Debug-iphonesimulator&#x2F;TestRule.build&#x2F;Objects-normal&#x2F;x86_64&#x2F;ViewController.o</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注:-R=/Users/libing/oclint/oclint-xcoderules/rules.dl/Debug /Users/libing/oclint/oclint-xcodebuild/TestRule/TestRule/ViewController.m – -x objective-c - isystem ~/oclint/build/oclint-release/lib/clang/5.0.1/include/ 加上图上从-arch x86_64 开始复制到最后，拼起来放到自定义规则的scheme的run配置中。</p>
</blockquote>
<p><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-165415.png"></p>
<h5 id="查看编译过程"><a href="#查看编译过程" class="headerlink" title="查看编译过程"></a>查看编译过程</h5><p><code>clang -ccc-print-phases ViewController.m</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: input, &quot;ViewController.m&quot;, objective-c</span><br><span class="line">1: preprocessor, &#123;0&#125;, objective-c-cpp-output → 预编译</span><br><span class="line">2: compiler, &#123;1&#125;, ir → 前端编译，生成中间代码IR</span><br><span class="line">3: backend, &#123;2&#125;, assembler → 后端Backend 4: assembler, &#123;3&#125;, object → 生成目标.o文件 5: linker, &#123;4&#125;, image → 链接</span><br><span class="line">6: bind-arch, &quot;x86_64&quot;, &#123;5&#125;, image → 绑定架构</span><br></pre></td></tr></table></figure>
<h5 id="查看-preprocessor-预处理"><a href="#查看-preprocessor-预处理" class="headerlink" title="查看 preprocessor(预处理)"></a>查看 preprocessor(预处理)</h5><p><code>clang -E ViewController.m</code><br><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-165559.png"></p>
<blockquote>
<p>注意:出现fatal error: ‘UIKit/UIKit.h’ file not found，但不影响查看结果，如果不报错指定一下sdk<br>clang -E -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk ViewController.m</p>
</blockquote>
<h5 id="词法分析，生成Token"><a href="#词法分析，生成Token" class="headerlink" title="词法分析，生成Token"></a>词法分析，生成Token</h5><p><code>clang -fmodules -E -Xclang -dump-tokens ViewController.m</code><br><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-165713.png"></p>
<h5 id="语法分析，生成抽象AST语法树"><a href="#语法分析，生成抽象AST语法树" class="headerlink" title="语法分析，生成抽象AST语法树"></a>语法分析，生成抽象AST语法树</h5><p><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-165743.png"></p>
<blockquote>
<p>通过语法分析可以清晰的看到语法树中的节点，对应的节点Decl(声明) / Stmt(语句、表达式)，通过Google 搜索:clang XXX 可以直接定位到clang的该节 点文档说明。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分析所有声明</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitDecl</span><span class="params">(Decl *decl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 返回true以继续遍历AST，返回false以终止遍历，退出Clang </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分析表达式</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitStmt</span><span class="params">(Stmt *S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 返回true以继续遍历AST，返回false以终止遍历，退出Clang </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="自定义规则源码"><a href="#自定义规则源码" class="headerlink" title="自定义规则源码"></a>自定义规则源码</h5><p><a href="https://github.com/zhonghphuan/OClintScripts">OClintScripts</a></p>
<h5 id="自定义属性规范"><a href="#自定义属性规范" class="headerlink" title="自定义属性规范"></a>自定义属性规范</h5><ol>
<li>nonatomic 与 atomic 修饰:遗忘或错用了 atomic 修饰<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCPropertyDecl</span><span class="params">(ObjCPropertyDecl *node)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (node-&gt;isAtomic()) &#123;</span><br><span class="line">    <span class="built_in">string</span> description = <span class="string">&quot;不应该用atomic修饰 &quot;</span> + node-&gt;getNameAsString() + <span class="string">&quot; 请改用nonatomic&quot;</span>;</span><br><span class="line">    addViolation(node, <span class="keyword">this</span>, description);<span class="comment">//发出警告</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
代码解析: 通过AST抽象语法树分析:<br><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-174140.png"><br>入口在VisitObjCPropertyDecl方法，那么在此方法中断点验证确实如此，接下来分析，属性中是否是atomic修饰，凭着灵感发现确实自动补全了isAtomic 方法，也可以这么写:<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ObjCPropertyDecl::PropertyAttributeKind attributeKind = node-&gt;getPropertyAttributes(); </span><br><span class="line">    <span class="keyword">if</span>(!(attributeKind &amp; ObjCPropertyDecl::OBJC_PR_nonatomic))&#123;</span><br><span class="line">    <span class="built_in">string</span> description = <span class="string">&quot;不应该用atomic修饰 &quot;</span> + node-&gt;getNameAsString() + <span class="string">&quot; 请改用nonatomic&quot;</span>;</span><br><span class="line">    addViolation(node, <span class="keyword">this</span>, description); <span class="comment">//发出警告</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>NSString 应尽量用 copy 修饰，避免用 strong 修饰<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(starts_with(typeStr, <span class="string">&quot;NSString&quot;</span>) &amp;&amp; !(attributeKind &amp; ObjCPropertyDecl::OBJC_PR_copy)) &#123;</span><br><span class="line">    addViolation(node, <span class="keyword">this</span>, typeStr + node-&gt;getNameAsString() + <span class="string">&quot; 应尽量用 copy 修饰&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Delegate 应该用 weak 修饰<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(typeStr.find(<span class="string">&quot;&lt;&quot;</span>)!=<span class="built_in">string</span>::npos &amp;&amp; typeStr.find(<span class="string">&quot;&gt;&quot;</span>)!=<span class="built_in">string</span>::npos &amp;&amp; starts_with(node-&gt;getType().getAsString(), <span class="string">&quot;id&quot;</span>))&#123; <span class="keyword">if</span>(!(attributeKind &amp; ObjCPropertyDecl::OBJC_PR_weak))&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; node-&gt;getType().getAsString()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    addViolation(node, <span class="keyword">this</span>, node-&gt;getNameAsString() + <span class="string">&quot; 尽可能用 weak 修饰&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Block 应该用 copy / strong 修饰<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (node-&gt;getType()-&gt;isBlockPointerType()) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!((attributeKind &amp; ObjCPropertyDecl::OBJC_PR_copy) || (attributeKind &amp; ObjCPropertyDecl::OBJC_PR_strong)))&#123; </span><br><span class="line">    addViolation(node, <span class="keyword">this</span>, node-&gt;getNameAsString() + <span class="string">&quot; 应该用 copy / strong 修饰&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>属性名称应该遵循驼峰命名，不应该以大写或_开头<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> name = node-&gt;getNameAsString(); </span><br><span class="line"><span class="built_in">string</span>::iterator itor = name.begin(); </span><br><span class="line"><span class="keyword">if</span>(*itor &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; *itor &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">    addViolation(node, <span class="keyword">this</span>, <span class="string">&quot;Property &quot;</span>+name+<span class="string">&quot; 应该遵循驼峰命名，不应该以大写字母开头&quot;</span>); &#125;</span><br><span class="line"><span class="keyword">if</span>(*itor == <span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">    addViolation(node, <span class="keyword">this</span>, <span class="string">&quot;Property &quot;</span>+name+<span class="string">&quot; 应该遵循驼峰命名，不应该以下划线开头&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>成员变量应该以_开头<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCIvarDecl</span><span class="params">(ObjCIvarDecl *node)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name = node-&gt;getNameAsString(); </span><br><span class="line">    <span class="built_in">string</span>::iterator itor = name.begin(); </span><br><span class="line">    <span class="keyword">if</span>(*itor != <span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">        addViolation(node, <span class="keyword">this</span>, <span class="string">&quot;成员变量 &quot;</span>+name+<span class="string">&quot; 应该以下划线开头&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="自定义空格规范"><a href="#自定义空格规范" class="headerlink" title="自定义空格规范"></a>自定义空格规范</h5></li>
<li>方法前面-或+请遵循空格规范、方法大括号请遵循空格规范<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCMethodDecl</span><span class="params">(ObjCMethodDecl *node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> methodDeclStr;</span><br><span class="line">        ASTContext *context = _carrier-&gt;getASTContext();</span><br><span class="line">        SourceLocation begin = node-&gt;getSourceRange().getBegin();</span><br><span class="line">        SourceLocation end = node-&gt;getSourceRange().getEnd(); methodDeclStr.assign(context-&gt;getSourceManager().getCharacterData(begin),end.getRawEncoding()-begin.getRawEncoding());</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = methodDeclStr.begin(); it!= methodDeclStr.end(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it ==<span class="string">&#x27;-&#x27;</span> || *it ==<span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it+<span class="number">2</span> &lt; methodDeclStr.end()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!((*(it+<span class="number">1</span>) == <span class="string">&#x27; &#x27;</span>)&amp;&amp;(*(it+<span class="number">2</span>) == <span class="string">&#x27;(&#x27;</span>))) &#123;</span><br><span class="line">                        addViolation(node, <span class="keyword">this</span>, <span class="string">&quot;方法前面-或+请遵循空格规范&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (*it ==<span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it<span class="number">-1</span> &gt;= methodDeclStr.begin()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*(it<span class="number">-1</span>) != <span class="string">&#x27; &#x27;</span> &amp;&amp; *(it<span class="number">-1</span>) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                        addViolation(node, <span class="keyword">this</span>, <span class="string">&quot;方法大括号请遵循空格规范&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>@property左括号、右括号、中间逗号、*修饰需要遵循空格规范<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCPropertyDecl</span><span class="params">(ObjCPropertyDecl *node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> methodDeclStr;</span><br><span class="line">        ASTContext *context = _carrier-&gt;getASTContext();</span><br><span class="line">        SourceLocation begin = node-&gt;getSourceRange().getBegin();</span><br><span class="line">        SourceLocation end = node-&gt;getSourceRange().getEnd(); methodDeclStr.assign(context-&gt;getSourceManager().getCharacterData(begin),end.getRawEncoding()-begin.getRawEncoding());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = methodDeclStr.begin(); it!= methodDeclStr.end(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it<span class="number">-2</span> &gt;= methodDeclStr.begin()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(*(it<span class="number">-1</span>) == <span class="string">&#x27; &#x27;</span> &amp;&amp; *(it<span class="number">-2</span>) == <span class="string">&#x27;y&#x27;</span>) &amp;&amp; *(it+<span class="number">1</span>) != <span class="string">&#x27;^&#x27;</span>) &#123;</span><br><span class="line">                        addViolation(node, <span class="keyword">this</span>, node-&gt;getNameAsString() + <span class="string">&quot;@property左括号请遵循空格规范&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it+<span class="number">1</span> &lt; methodDeclStr.end()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*(it+<span class="number">1</span>) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                        addViolation(node, <span class="keyword">this</span>, node-&gt;getNameAsString() + <span class="string">&quot;@property中逗号请遵循空格规范&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it+<span class="number">1</span> &lt; methodDeclStr.end()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*(it+<span class="number">1</span>) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                        addViolation(node, <span class="keyword">this</span>, node-&gt;getNameAsString() + <span class="string">&quot;@property右括号请遵循空格规范&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it<span class="number">-1</span> &gt;= methodDeclStr.begin()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*(it<span class="number">-1</span>) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                        addViolation(node, <span class="keyword">this</span>, node-&gt;getNameAsString() + <span class="string">&quot;@property属性*修饰请遵循空格规范&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="自定义枚举规范"><a href="#自定义枚举规范" class="headerlink" title="自定义枚举规范"></a>自定义枚举规范</h5></li>
<li>NS_ENUM/NS_OPTIONSenum<br>经过调试发现enum枚举走VisitEnumDecl方法，而NS_ENUM/NS_OPTIONS均不走。<br><img src="/images/iOS-LLVM-Clang-%E6%B5%85%E8%B0%88/WX20200822-201833.png"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitEnumDecl</span><span class="params">(EnumDecl *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        addViolation(node, <span class="keyword">this</span>, node-&gt;getNameAsString()+<span class="string">&quot;枚举尽量使用NS_ENUM/NS_OPTIONS&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
或者基于AbstractASTMatcherRule匹配<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">const</span> MatchFinder::MatchResult &amp;result)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> EnumDecl *enumDecl = result.Nodes.getNodeAs&lt;EnumDecl&gt;(<span class="string">&quot;enumDecl&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (enumDecl)</span><br><span class="line">    &#123;</span><br><span class="line">        addViolation(node, <span class="keyword">this</span>, <span class="string">&quot;枚举尽量使用NS_ENUM/NS_OPTIONS&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setUpMatcher</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    addMatcher(enumDecl().bind(<span class="string">&quot;enumDecl&quot;</span>)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>枚举不要下划线开头<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitEnumConstantDecl</span><span class="params">(EnumConstantDecl *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name = node-&gt;getNameAsString();</span><br><span class="line">    <span class="built_in">string</span>::iterator itor = name.begin();</span><br><span class="line">    <span class="keyword">if</span>(*itor == <span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">       addViolation(node, <span class="keyword">this</span>, <span class="string">&quot;枚举不要下划线开头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="自定义类名规范"><a href="#自定义类名规范" class="headerlink" title="自定义类名规范"></a>自定义类名规范</h5>类名使用大写字母开头<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCProtocolDecl</span><span class="params">(ObjCProtocolDecl *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> name = node-&gt;getNameAsString();</span><br><span class="line">        <span class="built_in">string</span>::iterator itor = name.begin();</span><br><span class="line">        <span class="keyword">if</span>(!(*itor &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; *itor &lt;= <span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">            addViolation(node, <span class="keyword">this</span>, name+<span class="string">&quot;协议名请用大写字母开头&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCImplDecl</span><span class="params">(ObjCImplDecl *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> name = node-&gt;getNameAsString();</span><br><span class="line">        <span class="built_in">string</span>::iterator itor = name.begin();</span><br><span class="line">        <span class="keyword">if</span>(!(*itor &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; *itor &lt;= <span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">            addViolation(node, <span class="keyword">this</span>, name+<span class="string">&quot;类名请用大写字母开头&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="自定义方法格式规范"><a href="#自定义方法格式规范" class="headerlink" title="自定义方法格式规范"></a>自定义方法格式规范</h5>方法参数超过3个，需要折行并冒号对齐<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCMethodDecl</span><span class="params">(ObjCMethodDecl *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name = node-&gt;getNameAsString();</span><br><span class="line">    <span class="keyword">if</span>( node-&gt;param_size()&gt;_threshold)&#123;</span><br><span class="line">        <span class="built_in">string</span> methodDeclStr;</span><br><span class="line">        ASTContext *context = _carrier-&gt;getASTContext();</span><br><span class="line">        SourceLocation begin = node-&gt;getSourceRange().getBegin();</span><br><span class="line">        SourceLocation end = node-&gt;getSourceRange().getEnd(); methodDeclStr.assign(context-&gt;getSourceManager().getCharacterData(begin),end.getRawEncoding()-node-&gt;getSourceRange().getBegin().getRawEncoding());</span><br><span class="line">        <span class="built_in">string</span> replaceName = formatObjcMethodName(methodDeclStr);</span><br><span class="line">        <span class="keyword">if</span>(methodDeclStr.find(replaceName))&#123;</span><br><span class="line">            addViolation(node, <span class="keyword">this</span>, <span class="string">&quot;方法参数超过&quot;</span>+to_string(_threshold)+<span class="string">&quot;个，需要折行并冒号对齐&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="修正oclint误报规范"><a href="#修正oclint误报规范" class="headerlink" title="修正oclint误报规范"></a>修正oclint误报规范</h5>PreferEarlyExit:使用提前退出/继续来简化代码并减少缩进<br>误报:懒加载与init初始化误判<br>修正思路:识别懒加载与init方法进行判断<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">starts_with</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s1, <span class="keyword">const</span> <span class="built_in">string</span>&amp; s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s2.size() &lt;= s1.size() &amp;&amp; s1.compare(<span class="number">0</span>, s2.size(), s2) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将Property入栈到数组与懒加载比较是否selector相同</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCPropertyDecl</span><span class="params">(ObjCPropertyDecl *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">std</span>::find(_arraySelector.begin(), _arraySelector.end(), node-&gt;getNameAsString()) == _arraySelector.end()) &#123;</span><br><span class="line">        _arraySelector.push_back(node-&gt;getNameAsString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以init开头的都认为是初始化方法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCMethodDecl</span><span class="params">(ObjCMethodDecl *node)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> selectorName = node-&gt;getSelector().getAsString();</span><br><span class="line">    <span class="keyword">if</span> (starts_with(selectorName, <span class="string">&quot;init&quot;</span>) || <span class="built_in">std</span>::find(_arraySelector.begin(), _arraySelector.end(), selectorName) != _arraySelector.end() ) &#123;</span><br><span class="line">        _isSysSelector = <span class="literal">true</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _isSysSelector = <span class="literal">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过_isSysSelector修正误报</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitCompoundStmt</span><span class="params">(CompoundStmt* compoundStmt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compoundStmt-&gt;size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_isSysSelector) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> last = compoundStmt-&gt;body_rbegin();</span><br><span class="line">    <span class="keyword">if</span> (isFlowOfControlInterrupt(*last)) &#123;</span><br><span class="line">        addViolationIfStmtIsLongIf(*++last);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="自定义内存泄漏检测"><a href="#自定义内存泄漏检测" class="headerlink" title="自定义内存泄漏检测"></a>自定义内存泄漏检测</h5><p>由于目前xcode对block循环引用在编译时期已有提示:capturing ‘self’ strongly in this block is likely to lead to a retain cycle，但如果API 中的block并未检测。新增了此处关于block强引用的检测。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    _teamname = RuleConfiguration::stringForKey(<span class="string">&quot;TEAM_NAME&quot;</span>, <span class="string">&quot;xxxxx&quot;</span>);       </span><br><span class="line">    <span class="keyword">this</span>-&gt;ignoreArr.push_back(<span class="string">&quot;UIView&quot;</span>); <span class="comment">// 忽略UIView类的block检测 </span></span><br><span class="line">    <span class="keyword">this</span>-&gt;ignoreArr.push_back(<span class="string">&quot;LCRoutes&quot;</span>);<span class="comment">// 忽略LCRoutes类的block检测</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isMasnoryBlock</span><span class="params">(BlockDecl *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (BlockDecl::param_iterator iterator = node-&gt;param_begin() ; iterator != node-&gt;param_end(); iterator ++) </span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span> ((*iterator)-&gt;getType().getAsString().find(<span class="string">&quot;MASConstraintMaker&quot;</span>) != <span class="built_in">string</span>::npos) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isIgnoreArrClass</span><span class="params">(ObjCMessageExpr *node)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> type = node-&gt;getClassReceiver().getAsString();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator ret = <span class="built_in">std</span>::find(<span class="keyword">this</span>-&gt;ignoreArr.begin(), <span class="keyword">this</span>-&gt;ignoreArr.end(), type); </span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="keyword">this</span>-&gt;ignoreArr.end()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCMessageExpr</span><span class="params">(ObjCMessageExpr *node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isIgnoreArrClass(node)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> argCount = node-&gt;getNumArgs(); </span><br><span class="line">    Expr **exprArray = node-&gt;getArgs(); </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argCount; i ++ ) &#123;</span><br><span class="line">        BlockExpr *expr = dyn_cast_or_null&lt;BlockExpr&gt;(exprArray[i]); </span><br><span class="line">        <span class="keyword">if</span> (expr &amp;&amp; expr-&gt;getBlockDecl()) &#123;</span><br><span class="line">            BlockDecl *blockDecl = expr-&gt;getBlockDecl();</span><br><span class="line">            <span class="keyword">for</span> (BlockDecl::capture_const_iterator iterator = blockDecl-&gt;capture_begin() ; iterator != blockDecl-&gt;capture_end(); iterator ++) &#123;</span><br><span class="line">                ImplicitParamDecl *implicitParamDecl = dyn_cast_or_null&lt;ImplicitParamDecl&gt;(iterator-&gt;getVariable());</span><br><span class="line">                <span class="keyword">if</span> (implicitParamDecl &amp;&amp; implicitParamDecl-&gt;getName() == <span class="string">&quot;self&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isMasnoryBlock(blockDecl)) &#123; </span><br><span class="line">                        <span class="built_in">string</span> methodDeclStr;</span><br><span class="line">                        ASTContext *context = _carrier-&gt;getASTContext();</span><br><span class="line">                        SourceLocation begin = <span class="keyword">this</span>-&gt;methodDecl-&gt;getSourceRange().getBegin();</span><br><span class="line">                        SourceLocation end = <span class="keyword">this</span>-&gt;methodDecl-&gt;getSourceRange().getEnd(); </span><br><span class="line">                        methodDeclStr.assign(context-&gt;getSourceManager().getCharacterData(begin),end.getRawEncoding()-begin.getRawEncoding());</span><br><span class="line">                        <span class="built_in">string</span> methodblock;</span><br><span class="line">                        SourceLocation beginBlock = node-&gt;getSourceRange().getBegin();</span><br><span class="line">                        SourceLocation endBlock = node-&gt;getSourceRange().getEnd(); </span><br><span class="line">                        methodblock.assign(context-&gt;getSourceManager(). getCharacterData(beginBlock),endBlock.getRawEncoding()-beginBlock.getRawEncoding());</span><br><span class="line">                        <span class="keyword">if</span> (methodDeclStr.find(methodblock)!=<span class="built_in">string</span>::npos &amp;&amp; methodDeclStr.find(<span class="string">&quot;@weakify(self)&quot;</span>)==<span class="built_in">string</span>::npos &amp;&amp; methodDeclStr.find(<span class="string">&quot;__weak&quot;</span>)==<span class="built_in">string</span>::npos &amp;&amp; node-&gt;getSelector().getAsString().find(<span class="string">&quot;animateWithDuration:&quot;</span>)==<span class="built_in">string</span>::npos) </span><br><span class="line">                        &#123;</span><br><span class="line">                            addViolation(blockDecl, <span class="keyword">this</span>,<span class="string">&quot;block中强引用了self，注意使用weak修饰self&quot;</span>); </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VisitObjCMethodDecl</span><span class="params">(ObjCMethodDecl *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;methodDecl = node;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LLVM-Clang</category>
      </categories>
      <tags>
        <tag>LLVM-Clang</tag>
      </tags>
  </entry>
</search>
